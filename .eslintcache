[{"/Users/jani/Code/Web/dxpaint/src/index.tsx":"1","/Users/jani/Code/Web/dxpaint/src/components/App.tsx":"2","/Users/jani/Code/Web/dxpaint/src/components/canvas/ZoomCanvas.tsx":"3","/Users/jani/Code/Web/dxpaint/src/components/canvas/CanvasSyncHandler.tsx":"4","/Users/jani/Code/Web/dxpaint/src/components/toolbox/BuiltInBrushes.tsx":"5","/Users/jani/Code/Web/dxpaint/src/components/palette/ColorIndicator.tsx":"6","/Users/jani/Code/Web/dxpaint/src/overmind/canvas/index.ts":"7","/Users/jani/Code/Web/dxpaint/src/overmind/app/index.ts":"8","/Users/jani/Code/Web/dxpaint/src/overmind/tool/index.ts":"9","/Users/jani/Code/Web/dxpaint/src/brush/BrushHistory.ts":"10","/Users/jani/Code/Web/dxpaint/src/components/canvas/Canvas.tsx":"11","/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItemOpen.tsx":"12","/Users/jani/Code/Web/dxpaint/src/brush/CustomBrush.tsx":"13","/Users/jani/Code/Web/dxpaint/src/overmind/dialog/state.ts":"14","/Users/jani/Code/Web/dxpaint/src/overmind/dialog/actions.ts":"15","/Users/jani/Code/Web/dxpaint/src/overmind/palette/actions.ts":"16","/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/actions.ts":"17","/Users/jani/Code/Web/dxpaint/src/overmind/tool/state.ts":"18","/Users/jani/Code/Web/dxpaint/src/overmind/brush/state.ts":"19","/Users/jani/Code/Web/dxpaint/src/algorithm/shape.ts":"20","/Users/jani/Code/Web/dxpaint/src/tools/FreehandTool.tsx":"21","/Users/jani/Code/Web/dxpaint/src/components/palette/util.tsx":"22","/Users/jani/Code/Web/dxpaint/src/tools/EllipseTool.tsx":"23","/Users/jani/Code/Web/dxpaint/src/tools/AirbrushTool.tsx":"24","/Users/jani/Code/Web/dxpaint/src/brush/BuiltInBrushFactory.tsx":"25","/Users/jani/Code/Web/dxpaint/src/tools/util/Throttle.tsx":"26","/Users/jani/Code/Web/dxpaint/src/overmind/index.ts":"27","/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItemSave.tsx":"28","/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxDualToggleButton.tsx":"29","/Users/jani/Code/Web/dxpaint/src/tools/util/Debounce.tsx":"30","/Users/jani/Code/Web/dxpaint/src/overmind/canvas/state.ts":"31","/Users/jani/Code/Web/dxpaint/src/overmind/undo/state.ts":"32","/Users/jani/Code/Web/dxpaint/src/overmind/palette/state.ts":"33","/Users/jani/Code/Web/dxpaint/src/overmind/tool/actions.ts":"34","/Users/jani/Code/Web/dxpaint/src/brush/PixelBrush.tsx":"35","/Users/jani/Code/Web/dxpaint/src/tools/LineTool.tsx":"36","/Users/jani/Code/Web/dxpaint/src/tools/ZoomInitialPointSelectorTool.tsx":"37","/Users/jani/Code/Web/dxpaint/src/tools/CurveTool.tsx":"38","/Users/jani/Code/Web/dxpaint/src/tools/PolygonTool.tsx":"39","/Users/jani/Code/Web/dxpaint/src/components/dialog/Dialog.tsx":"40","/Users/jani/Code/Web/dxpaint/src/components/canvas/MainCanvas.tsx":"41","/Users/jani/Code/Web/dxpaint/src/components/canvas/CanvasState.tsx":"42","/Users/jani/Code/Web/dxpaint/src/components/canvas/hooks.tsx":"43","/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxToggleButton.tsx":"44","/Users/jani/Code/Web/dxpaint/src/components/paletteEditor/PaletteEditor.tsx":"45","/Users/jani/Code/Web/dxpaint/src/components/GlobalHotkeyManager.tsx":"46","/Users/jani/Code/Web/dxpaint/src/components/toolbox/Toolbox.tsx":"47","/Users/jani/Code/Web/dxpaint/src/components/dialog/DialogManager.tsx":"48","/Users/jani/Code/Web/dxpaint/src/overmind/palette/index.ts":"49","/Users/jani/Code/Web/dxpaint/src/overmind/brush/index.ts":"50","/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/index.ts":"51","/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItem.tsx":"52","/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxActionButton.tsx":"53","/Users/jani/Code/Web/dxpaint/src/overmind/app/actions.ts":"54","/Users/jani/Code/Web/dxpaint/src/overmind/brush/actions.ts":"55","/Users/jani/Code/Web/dxpaint/src/tools/BrushSelector.tsx":"56","/Users/jani/Code/Web/dxpaint/src/tools/CircleTool.tsx":"57","/Users/jani/Code/Web/dxpaint/src/tools/ColorSelectorTool.tsx":"58","/Users/jani/Code/Web/dxpaint/src/tools/util/SelectionIndicator.tsx":"59","/Users/jani/Code/Web/dxpaint/src/overmind/dialog/index.ts":"60","/Users/jani/Code/Web/dxpaint/src/overmind/canvas/actions.ts":"61","/Users/jani/Code/Web/dxpaint/src/tools/RectangleTool.tsx":"62","/Users/jani/Code/Web/dxpaint/src/tools/TextTool.tsx":"63","/Users/jani/Code/Web/dxpaint/src/overmind/undo/index.ts":"64","/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/state.ts":"65","/Users/jani/Code/Web/dxpaint/src/tools/DottedFreehandTool.tsx":"66","/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/actions.ts":"67","/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/state.ts":"68","/Users/jani/Code/Web/dxpaint/src/components/palette/ColorButton.tsx":"69","/Users/jani/Code/Web/dxpaint/src/components/palette/Palette.tsx":"70","/Users/jani/Code/Web/dxpaint/src/algorithm/primitive.ts":"71","/Users/jani/Code/Web/dxpaint/src/overmind/undo/actions.ts":"72","/Users/jani/Code/Web/dxpaint/src/components/menubar/Menubar.tsx":"73","/Users/jani/Code/Web/dxpaint/src/tools/util/util.tsx":"74","/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/index.ts":"75","/Users/jani/Code/Web/dxpaint/src/overmind/app/state.ts":"76","/Users/jani/Code/Web/dxpaint/src/overmind/undo/UndoBuffer.ts":"77","/Users/jani/Code/Web/dxpaint/src/components/canvas/util.tsx":"78","/Users/jani/Code/Web/dxpaint/src/serviceWorker.ts":"79","/Users/jani/Code/Web/dxpaint/src/tools/FloodFillTool.tsx":"80","/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/program/GeometricIndexer.ts":"81","/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/program/DrawImageRenderer.ts":"82","/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/program/GeometricRenderer.ts":"83","/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/PaintingCanvasController.ts":"84","/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/program/DrawImageIndexer.ts":"85","/Users/jani/Code/Web/dxpaint/src/canvas/overlayCanvas/OverlayCanvasController.ts":"86","/Users/jani/Code/Web/dxpaint/src/canvas/overlayCanvas/program/OverlayGeometricRenderer.ts":"87","/Users/jani/Code/Web/dxpaint/src/canvas/overlayCanvas/OverlayMainCanvasRenderer.ts":"88","/Users/jani/Code/Web/dxpaint/src/canvas/util/util.ts":"89","/Users/jani/Code/Web/dxpaint/src/canvas/ZoomCanvasRenderer.ts":"90","/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/ColorIndexer.ts":"91","/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/MainCanvasRenderer.ts":"92","/Users/jani/Code/Web/dxpaint/src/canvas/overlayCanvas/program/OverlayDrawImageRenderer.ts":"93","/Users/jani/Code/Web/dxpaint/src/domain/LineV.ts":"94","/Users/jani/Code/Web/dxpaint/src/domain/LineH.ts":"95","/Users/jani/Code/Web/dxpaint/src/domain/Line.ts":"96","/Users/jani/Code/Web/dxpaint/src/canvas/util/webglUtil.ts":"97"},{"size":758,"mtime":1581006660054,"results":"98","hashOfConfig":"99"},{"size":1647,"mtime":1610123744119,"results":"100","hashOfConfig":"99"},{"size":2303,"mtime":1587397395180,"results":"101","hashOfConfig":"99"},{"size":1650,"mtime":1587397383935,"results":"102","hashOfConfig":"99"},{"size":4292,"mtime":1588883165180,"results":"103","hashOfConfig":"99"},{"size":1341,"mtime":1609964713351,"results":"104","hashOfConfig":"99"},{"size":99,"mtime":1570358386366,"results":"105","hashOfConfig":"99"},{"size":99,"mtime":1589653071467,"results":"106","hashOfConfig":"99"},{"size":99,"mtime":1581162181250,"results":"107","hashOfConfig":"99"},{"size":407,"mtime":1613232457299,"results":"108","hashOfConfig":"99"},{"size":5437,"mtime":1617126089378,"results":"109","hashOfConfig":"99"},{"size":712,"mtime":1586637521430,"results":"110","hashOfConfig":"99"},{"size":7971,"mtime":1619264140949,"results":"111","hashOfConfig":"99"},{"size":103,"mtime":1589645340777,"results":"112","hashOfConfig":"99"},{"size":238,"mtime":1589698799652,"results":"113","hashOfConfig":"99"},{"size":994,"mtime":1610288900130,"results":"114","hashOfConfig":"99"},{"size":2307,"mtime":1587665133808,"results":"115","hashOfConfig":"99"},{"size":3939,"mtime":1606591580738,"results":"116","hashOfConfig":"99"},{"size":775,"mtime":1598628605933,"results":"117","hashOfConfig":"99"},{"size":21395,"mtime":1619263138318,"results":"118","hashOfConfig":"99"},{"size":3874,"mtime":1618043735529,"results":"119","hashOfConfig":"99"},{"size":2427,"mtime":1598195635333,"results":"120","hashOfConfig":"99"},{"size":5830,"mtime":1619260817426,"results":"121","hashOfConfig":"99"},{"size":3330,"mtime":1617089360353,"results":"122","hashOfConfig":"99"},{"size":3137,"mtime":1614154844644,"results":"123","hashOfConfig":"99"},{"size":749,"mtime":1606592951751,"results":"124","hashOfConfig":"99"},{"size":1069,"mtime":1609948473281,"results":"125","hashOfConfig":"99"},{"size":419,"mtime":1586636737515,"results":"126","hashOfConfig":"99"},{"size":1292,"mtime":1615622215367,"results":"127","hashOfConfig":"99"},{"size":448,"mtime":1606592971846,"results":"128","hashOfConfig":"99"},{"size":990,"mtime":1606591610390,"results":"129","hashOfConfig":"99"},{"size":163,"mtime":1616686264476,"results":"130","hashOfConfig":"99"},{"size":787,"mtime":1610395467992,"results":"131","hashOfConfig":"99"},{"size":3492,"mtime":1598088214899,"results":"132","hashOfConfig":"99"},{"size":3477,"mtime":1619263198462,"results":"133","hashOfConfig":"99"},{"size":3019,"mtime":1619246577210,"results":"134","hashOfConfig":"99"},{"size":1686,"mtime":1596966551515,"results":"135","hashOfConfig":"99"},{"size":3179,"mtime":1619246615144,"results":"136","hashOfConfig":"99"},{"size":4424,"mtime":1598418176200,"results":"137","hashOfConfig":"99"},{"size":620,"mtime":1609948514564,"results":"138","hashOfConfig":"99"},{"size":1542,"mtime":1616932868894,"results":"139","hashOfConfig":"99"},{"size":1328,"mtime":1576359001814,"results":"140","hashOfConfig":"99"},{"size":3226,"mtime":1613738313456,"results":"141","hashOfConfig":"99"},{"size":849,"mtime":1582737330219,"results":"142","hashOfConfig":"99"},{"size":2134,"mtime":1618037345519,"results":"143","hashOfConfig":"99"},{"size":794,"mtime":1589698776952,"results":"144","hashOfConfig":"99"},{"size":5255,"mtime":1613737486628,"results":"145","hashOfConfig":"99"},{"size":1298,"mtime":1589699509988,"results":"146","hashOfConfig":"99"},{"size":99,"mtime":1570358390587,"results":"147","hashOfConfig":"99"},{"size":99,"mtime":1570358382606,"results":"148","hashOfConfig":"99"},{"size":99,"mtime":1570358454848,"results":"149","hashOfConfig":"99"},{"size":479,"mtime":1586285629987,"results":"150","hashOfConfig":"99"},{"size":691,"mtime":1582737314794,"results":"151","hashOfConfig":"99"},{"size":197,"mtime":1589653419630,"results":"152","hashOfConfig":"99"},{"size":1538,"mtime":1613232457299,"results":"153","hashOfConfig":"99"},{"size":2633,"mtime":1596966551507,"results":"154","hashOfConfig":"99"},{"size":4747,"mtime":1619246602202,"results":"155","hashOfConfig":"99"},{"size":1250,"mtime":1617126089377,"results":"156","hashOfConfig":"99"},{"size":2013,"mtime":1619250240403,"results":"157","hashOfConfig":"99"},{"size":99,"mtime":1589645298846,"results":"158","hashOfConfig":"99"},{"size":1651,"mtime":1617126089306,"results":"159","hashOfConfig":"99"},{"size":3892,"mtime":1619246639053,"results":"160","hashOfConfig":"99"},{"size":3797,"mtime":1596966551513,"results":"161","hashOfConfig":"99"},{"size":99,"mtime":1570358463891,"results":"162","hashOfConfig":"99"},{"size":3476,"mtime":1606591793814,"results":"163","hashOfConfig":"99"},{"size":2892,"mtime":1598418027518,"results":"164","hashOfConfig":"99"},{"size":221,"mtime":1609964687396,"results":"165","hashOfConfig":"99"},{"size":94,"mtime":1609948309696,"results":"166","hashOfConfig":"99"},{"size":1140,"mtime":1610122119190,"results":"167","hashOfConfig":"99"},{"size":2782,"mtime":1610122387748,"results":"168","hashOfConfig":"99"},{"size":3111,"mtime":1613738274657,"results":"169","hashOfConfig":"99"},{"size":1261,"mtime":1617126089306,"results":"170","hashOfConfig":"99"},{"size":3361,"mtime":1610827576318,"results":"171","hashOfConfig":"99"},{"size":6801,"mtime":1618068243707,"results":"172","hashOfConfig":"99"},{"size":99,"mtime":1609948228471,"results":"173","hashOfConfig":"99"},{"size":129,"mtime":1589653235884,"results":"174","hashOfConfig":"99"},{"size":424,"mtime":1611407191206,"results":"175","hashOfConfig":"99"},{"size":758,"mtime":1616082227415,"results":"176","hashOfConfig":"99"},{"size":5183,"mtime":1615012131754,"results":"177","hashOfConfig":"99"},{"size":4028,"mtime":1584903623805,"results":"178","hashOfConfig":"99"},{"size":5275,"mtime":1619191509501,"results":"179","hashOfConfig":"99"},{"size":2086,"mtime":1619184850511,"results":"180","hashOfConfig":"99"},{"size":4218,"mtime":1619191725461,"results":"181","hashOfConfig":"99"},{"size":9015,"mtime":1619107804525,"results":"182","hashOfConfig":"99"},{"size":5828,"mtime":1619191551996,"results":"183","hashOfConfig":"99"},{"size":5300,"mtime":1618243469649,"results":"184","hashOfConfig":"99"},{"size":4787,"mtime":1619245365397,"results":"185","hashOfConfig":"99"},{"size":1557,"mtime":1618243240466,"results":"186","hashOfConfig":"99"},{"size":1638,"mtime":1619191683528,"results":"187","hashOfConfig":"99"},{"size":1401,"mtime":1618043289183,"results":"188","hashOfConfig":"99"},{"size":3612,"mtime":1619244926105,"results":"189","hashOfConfig":"99"},{"size":1214,"mtime":1618676099942,"results":"190","hashOfConfig":"99"},{"size":5681,"mtime":1619244993476,"results":"191","hashOfConfig":"99"},{"size":565,"mtime":1618726558340,"results":"192","hashOfConfig":"99"},{"size":567,"mtime":1619191463704,"results":"193","hashOfConfig":"99"},{"size":180,"mtime":1618674251371,"results":"194","hashOfConfig":"99"},{"size":1587,"mtime":1617636966253,"results":"195","hashOfConfig":"99"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},"1plr3f1",{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"213"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"198"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"245","messages":"246","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"219"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"227"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"219"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"278","messages":"279","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"219"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"213"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"296"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"198"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"312"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"219"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"227"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"329","messages":"330","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"219"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"227"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"227"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"216"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"386","messages":"387","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"402","messages":"403","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jani/Code/Web/dxpaint/src/index.tsx",[],[],"/Users/jani/Code/Web/dxpaint/src/components/App.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/ZoomCanvas.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/CanvasSyncHandler.tsx",[],[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/BuiltInBrushes.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/palette/ColorIndicator.tsx",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/canvas/index.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/app/index.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/tool/index.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/brush/BrushHistory.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/Canvas.tsx",["414","415"],"import React, { useEffect, useRef } from 'react';\nimport { CanvasStateAction } from './CanvasState';\nimport { useInitTool, useUndo, useFillStyle } from './hooks';\nimport { useOvermind } from '../../overmind';\nimport { getEventHandler, getEventHandlerOverlay } from '../../tools/util/util';\nimport { EventHandlerParams, EventHandlerParamsOverlay } from '../../tools/Tool';\nimport './Canvas.css';\nimport { paintingCanvasController } from '../../canvas/paintingCanvas/PaintingCanvasController';\nimport { overlayCanvasController } from '../../canvas/overlayCanvas/OverlayCanvasController';\n\ninterface Props {\n  canvasDispatch: React.Dispatch<CanvasStateAction>;\n  isZoomCanvas: boolean;\n  zoomFactor?: number;\n}\n\nexport function Canvas({\n  canvasDispatch,\n  isZoomCanvas,\n  zoomFactor = 1,\n}: Props): JSX.Element | null {\n  console.log('render ' + (isZoomCanvas ? 'ZoomCanvas' : 'MainCanvas'));\n  const canvasRef = useRef<HTMLCanvasElement>(document.createElement('canvas'));\n  const overlayCanvasRef = useRef<HTMLCanvasElement>(document.createElement('canvas'));\n  const paintingCanvasRef = useRef<HTMLCanvasElement>(document.createElement('canvas'));\n  const overlay2CanvasRef = useRef<HTMLCanvasElement>(document.createElement('canvas'));\n\n  useEffect((): void => {\n    canvasDispatch({\n      type: isZoomCanvas ? 'setZoomCanvas' : 'setMainCanvas',\n      elements: { canvas: canvasRef.current, overlay: overlayCanvasRef.current },\n    });\n    if (isZoomCanvas) {\n      paintingCanvasController.attachZoomCanvas(paintingCanvasRef.current);\n      overlayCanvasController.attachZoomCanvas(overlay2CanvasRef.current);\n    } else {\n      paintingCanvasController.attachMainCanvas(paintingCanvasRef.current);\n      overlayCanvasController.attachMainCanvas(overlay2CanvasRef.current);\n    }\n  }, []);\n\n  const canvasCtx = canvasRef.current.getContext('2d', {\n    alpha: false,\n    desynchronized: false, // desynchronized caused various problems with Windows version of Chrome\n  }) as CanvasRenderingContext2D | null;\n\n  const overlayCanvasCtx = overlayCanvasRef.current.getContext('2d', {\n    alpha: true,\n    desynchronized: false, // desynchronized caused various problems with Windows version of Chrome\n  }) as CanvasRenderingContext2D | null;\n\n  const { state, actions } = useOvermind();\n\n  const eventHandlerParams: EventHandlerParams = {\n    ctx: canvasCtx!,\n    onPaint: (): void => {\n      //actions.canvas.setCanvasModified(isZoomCanvas);\n    },\n    undoPoint: (): void => {\n      actions.undo.setUndoPoint(canvasRef.current);\n    },\n  };\n  const eventHandlerParamsOverlay: EventHandlerParamsOverlay = {\n    ctx: overlayCanvasCtx!,\n    onPaint: (): void => {\n      //actions.canvas.setOverlayCanvasModified(isZoomCanvas);\n    },\n  };\n\n  useUndo(canvasRef.current);\n  useInitTool(eventHandlerParams, eventHandlerParamsOverlay, isZoomCanvas);\n\n  useFillStyle(canvasCtx);\n  useFillStyle(overlayCanvasCtx);\n\n  if (!canvasCtx || !overlayCanvasCtx) {\n    return null; // no render\n  }\n\n  const tool = state.toolbox.activeTool;\n\n  const CSSZoom = {\n    width: state.canvas.resolution.width * zoomFactor,\n    height: state.canvas.resolution.height * zoomFactor,\n  };\n\n  return (\n    <>\n      <canvas\n        className=\"canvas\"\n        ref={canvasRef}\n        width={state.canvas.resolution.width}\n        height={state.canvas.resolution.height}\n        style={CSSZoom}\n        onClick={(event): void => {\n          getEventHandler(tool, 'onClick', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onClickOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onMouseDown={(event): void => {\n          getEventHandler(tool, 'onMouseDown', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onMouseDownOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onMouseUp={(event): void => {\n          getEventHandler(tool, 'onMouseUp', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onMouseUpOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onMouseEnter={(event): void => {\n          getEventHandler(tool, 'onMouseEnter', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onMouseEnterOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onMouseLeave={(event): void => {\n          getEventHandler(tool, 'onMouseLeave', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onMouseLeaveOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onMouseMove={(event): void => {\n          getEventHandler(tool, 'onMouseMove', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onMouseMoveOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onContextMenu={getEventHandler(tool, 'onContextMenu', eventHandlerParams)}\n      />\n      <canvas\n        className=\"canvas canvas--overlay\"\n        ref={paintingCanvasRef}\n        width={state.canvas.resolution.width}\n        height={state.canvas.resolution.height}\n        style={CSSZoom}\n      />\n      <canvas\n        className=\"canvas canvas--overlay\"\n        ref={overlay2CanvasRef}\n        width={state.canvas.resolution.width}\n        height={state.canvas.resolution.height}\n        style={CSSZoom}\n      />\n      <canvas\n        className=\"canvas canvas--overlay\"\n        ref={overlayCanvasRef}\n        width={state.canvas.resolution.width}\n        height={state.canvas.resolution.height}\n        style={CSSZoom}\n      />\n    </>\n  );\n}\n","/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItemOpen.tsx",[],[],"/Users/jani/Code/Web/dxpaint/src/brush/CustomBrush.tsx",["416","417","418","419","420","421","422","423"],"/Users/jani/Code/Web/dxpaint/src/overmind/dialog/state.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/dialog/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/palette/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/tool/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/brush/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/algorithm/shape.ts",["424"],"/Users/jani/Code/Web/dxpaint/src/tools/FreehandTool.tsx",["425","426","427","428"],"import {\n  Tool,\n  EventHandlerParamsWithEvent,\n  OverlayEventHandlerParamsWithEvent,\n  EventHandlerParams,\n} from './Tool';\nimport {\n  getMousePos,\n  clearOverlayCanvas,\n  isRightMouseButton,\n  isLeftOrRightMouseButton,\n  omit,\n  pointEquals,\n  points8Connected,\n} from './util/util';\nimport { overmind } from '../index';\nimport { brushHistory } from '../brush/BrushHistory';\nimport { paintingCanvasController } from '../canvas/paintingCanvas/PaintingCanvasController';\nimport { overlayCanvasController } from '../canvas/overlayCanvas/OverlayCanvasController';\n\nexport class FreehandTool implements Tool {\n  private prepareToPaint(withBGColor: boolean): void {\n    if (withBGColor) {\n      overmind.actions.tool.activeToolToBGFillStyle();\n      overmind.actions.brush.toBGBrush();\n    }\n  }\n\n  public onInit(params: EventHandlerParams): void {\n    overmind.actions.tool.freeHandToolPrevious(null);\n    overmind.actions.tool.activeToolToFGFillStyle();\n    overmind.actions.brush.toFGBrush();\n  }\n\n  public onContextMenu(params: EventHandlerParamsWithEvent): void {\n    const { event } = params;\n    event.preventDefault();\n  }\n\n  public onMouseMove(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n\n    if (event.buttons && overmind.state.tool.freehandTool.previous) {\n      const mousePos = getMousePos(canvas, event);\n      const start = overmind.state.tool.freehandTool.previous;\n      const end = mousePos;\n      if (pointEquals(start, end)) {\n        return; // this point has already been drawn to canvas\n      }\n      if (points8Connected(start, end)) {\n        brushHistory.current.drawDot(ctx, end, paintingCanvasController);\n      } else {\n        brushHistory.current.drawLine(ctx, start, end, paintingCanvasController);\n      }\n      overmind.actions.tool.freeHandToolPrevious(end);\n      onPaint();\n    }\n  }\n\n  public onMouseDown(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    const mousePos = getMousePos(canvas, event);\n    this.prepareToPaint(isRightMouseButton(event));\n    brushHistory.current.drawDot(ctx, mousePos, paintingCanvasController);\n    overmind.actions.tool.freeHandToolPrevious(mousePos);\n    onPaint();\n  }\n\n  public onMouseUp(params: EventHandlerParamsWithEvent): void {\n    const { undoPoint } = params;\n    this.onInit(omit(params, 'event'));\n    undoPoint();\n  }\n\n  public onMouseLeave(params: EventHandlerParamsWithEvent): void {\n    this.onInit(omit(params, 'event'));\n  }\n\n  public onMouseEnter(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx: { canvas },\n    } = params;\n    if (isLeftOrRightMouseButton(event)) {\n      this.prepareToPaint(isRightMouseButton(event));\n      const mousePos = getMousePos(canvas, event);\n      overmind.actions.tool.freeHandToolPrevious(mousePos);\n    }\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    if (event.buttons) {\n      return;\n    }\n    //clearOverlayCanvas(canvas);\n    const mousePos = getMousePos(canvas, event);\n    //brushHistory.current.drawDot(ctx, mousePos);\n    brushHistory.current.drawDot(ctx, mousePos, overlayCanvasController);\n    onPaint();\n  }\n\n  public onMouseDownOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    //clearOverlayCanvas(canvas);\n    overlayCanvasController.clear();\n    onPaint();\n  }\n\n  public onMouseLeaveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    //clearOverlayCanvas(canvas);\n    overlayCanvasController.clear();\n    onPaint();\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/components/palette/util.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/EllipseTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/AirbrushTool.tsx",["429"],"import {\n  Tool,\n  EventHandlerParamsWithEvent,\n  OverlayEventHandlerParamsWithEvent,\n  EventHandlerParams,\n} from './Tool';\nimport {\n  getMousePos,\n  clearOverlayCanvas,\n  isRightMouseButton,\n  isLeftOrRightMouseButton,\n  omit,\n} from './util/util';\nimport { overmind } from '../index';\nimport { brushHistory } from '../brush/BrushHistory';\n\nexport class AirbrushTool implements Tool {\n  private timeout = 0;\n\n  private prepareToPaint(withBGColor: boolean): void {\n    if (withBGColor) {\n      overmind.actions.tool.activeToolToBGFillStyle();\n      overmind.actions.brush.toBGBrush();\n    }\n  }\n\n  public onInit(params: EventHandlerParams): void {\n    overmind.actions.tool.activeToolToFGFillStyle();\n    overmind.actions.brush.toFGBrush();\n  }\n\n  public onContextMenu(params: EventHandlerParamsWithEvent): void {\n    const { event } = params;\n    event.preventDefault();\n  }\n\n  public onMouseMove(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx: { canvas },\n    } = params;\n\n    const mousePos = getMousePos(canvas, event);\n    overmind.actions.tool.airbrushToolPosition(mousePos);\n  }\n\n  public onMouseDown(params: EventHandlerParamsWithEvent): void {\n    const { event, ctx, onPaint } = params;\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const draw = (ctx: CanvasRenderingContext2D, onPaint: Function): void => {\n      for (let i = 50; i--; ) {\n        const angle = getRandomFloat(0, Math.PI * 2);\n        const radius = getRandomFloat(0, 20);\n        if (overmind.state.tool.airbrushTool.position) {\n          brushHistory.current.drawDot(ctx, {\n            x: overmind.state.tool.airbrushTool.position.x + radius * Math.cos(angle),\n            y: overmind.state.tool.airbrushTool.position.y + radius * Math.sin(angle),\n          });\n        }\n      }\n      onPaint();\n      this.timeout = setTimeout(draw, 20, ctx, onPaint);\n    };\n\n    this.prepareToPaint(isRightMouseButton(event));\n    this.timeout = setTimeout(draw, 20, ctx, onPaint);\n  }\n\n  public onMouseUp(params: EventHandlerParamsWithEvent): void {\n    const { undoPoint } = params;\n    clearTimeout(this.timeout);\n    this.onInit(omit(params, 'event'));\n    undoPoint();\n  }\n\n  public onMouseLeave(params: EventHandlerParamsWithEvent): void {\n    const { event, undoPoint } = params;\n    clearTimeout(this.timeout);\n    this.onInit(omit(params, 'event'));\n    if (isLeftOrRightMouseButton(event)) {\n      undoPoint();\n    }\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    if (event.buttons) {\n      return;\n    }\n    clearOverlayCanvas(canvas);\n\n    const mousePos = getMousePos(canvas, event);\n    brushHistory.current.drawDot(ctx, mousePos);\n    onPaint();\n  }\n\n  public onMouseDownOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n\n  public onMouseLeaveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n}\n\nfunction getRandomFloat(min: number, max: number): number {\n  return Math.random() * (max - min) + min;\n}\n","/Users/jani/Code/Web/dxpaint/src/brush/BuiltInBrushFactory.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/util/Throttle.tsx",["430"],"export class Throttle {\n  private milliSecs: number;\n  private lastFunc: NodeJS.Timeout | null;\n  private lastRan: number | null;\n\n  public constructor(milliSecs: number) {\n    this.milliSecs = milliSecs;\n    this.lastFunc = null;\n    this.lastRan = null;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  public call(func: Function): void {\n    if (!this.lastRan) {\n      func();\n      this.lastRan = Date.now();\n    } else {\n      if (this.lastFunc) {\n        clearTimeout(this.lastFunc);\n      }\n      this.lastFunc = setTimeout(() => {\n        if (Date.now() - this.lastRan! >= this.milliSecs) {\n          func();\n          this.lastRan = Date.now();\n        }\n      }, this.milliSecs - (Date.now() - this.lastRan));\n    }\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/overmind/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItemSave.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxDualToggleButton.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/util/Debounce.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/canvas/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/undo/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/palette/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/tool/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/brush/PixelBrush.tsx",["431","432","433","434","435","436","437","438"],"/Users/jani/Code/Web/dxpaint/src/tools/LineTool.tsx",["439","440"],"/Users/jani/Code/Web/dxpaint/src/tools/ZoomInitialPointSelectorTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/CurveTool.tsx",["441","442"],"/Users/jani/Code/Web/dxpaint/src/tools/PolygonTool.tsx",["443"],"import {\n  Tool,\n  EventHandlerParamsWithEvent,\n  OverlayEventHandlerParamsWithEvent,\n  EventHandlerParams,\n} from './Tool';\nimport {\n  getMousePos,\n  clearOverlayCanvas,\n  isRightMouseButton,\n  pointEquals,\n  omit,\n} from './util/util';\nimport { overmind } from '../index';\nimport { Throttle } from './util/Throttle';\nimport { unfilledPolygon } from '../algorithm/shape';\nimport { PixelBrush } from '../brush/PixelBrush';\nimport { brushHistory } from '../brush/BrushHistory';\n\nexport class PolygonTool implements Tool {\n  private throttle = new Throttle(20);\n  public constructor(filled: boolean) {\n    this.filled = filled;\n  }\n  private filled: boolean;\n\n  private prepareToPaint(withBGColor: boolean): void {\n    if (withBGColor) {\n      overmind.actions.tool.activeToolToBGFillStyle();\n      overmind.actions.brush.toBGBrush();\n    }\n  }\n\n  public onInit(params: EventHandlerParams): void {\n    overmind.actions.tool.polygonToolReset();\n    overmind.actions.tool.activeToolToFGFillStyle();\n    overmind.actions.brush.toFGBrush();\n  }\n\n  public onContextMenu(params: EventHandlerParamsWithEvent): void {\n    const { event } = params;\n    event.preventDefault();\n  }\n\n  public onMouseDown(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      undoPoint,\n      onPaint,\n    } = params;\n    const mousePos = getMousePos(canvas, event);\n\n    // first click (left or right) determines polygon fill color\n    if (!overmind.state.tool.polygonTool.vertices.length) {\n      this.prepareToPaint(isRightMouseButton(event));\n      overmind.actions.tool.polygonToolAddVertice(mousePos);\n      return;\n    }\n\n    // complete polygon on right click or if starting point reselected\n    if (\n      isRightMouseButton(event) ||\n      pointEquals(overmind.state.tool.polygonTool.vertices[0], mousePos)\n    ) {\n      if (this.filled) {\n        brushHistory.current.drawFilledPolygon(ctx, overmind.state.tool.polygonTool.vertices);\n      } else {\n        brushHistory.current.drawUnfilledPolygon(ctx, overmind.state.tool.polygonTool.vertices);\n      }\n      undoPoint();\n      onPaint();\n      this.onInit(omit(params, 'event'));\n      return;\n    }\n\n    // otherwise just add new vertice\n    overmind.actions.tool.polygonToolAddVertice(mousePos);\n  }\n\n  // Overlay\n\n  public onMouseDownOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n\n    if (overmind.state.tool.polygonTool.vertices.length > 1) {\n      if (this.filled) {\n        unfilledPolygon(ctx, new PixelBrush(), overmind.state.tool.polygonTool.vertices, false);\n      } else {\n        brushHistory.current.drawUnfilledPolygon(\n          ctx,\n          overmind.state.tool.polygonTool.vertices,\n          false\n        );\n      }\n    }\n    onPaint();\n  }\n\n  public onMouseMoveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n\n    const mousePos = getMousePos(canvas, event);\n\n    if (!overmind.state.tool.polygonTool.vertices.length) {\n      clearOverlayCanvas(canvas);\n      brushHistory.current.drawDot(ctx, mousePos);\n      onPaint();\n      return;\n    }\n\n    if (this.filled) {\n      this.throttle.call((): void => {\n        clearOverlayCanvas(canvas);\n        unfilledPolygon(\n          ctx,\n          new PixelBrush(),\n          overmind.state.tool.polygonTool.vertices.slice().concat(mousePos),\n          false\n        );\n      });\n    } else {\n      this.throttle.call((): void => {\n        clearOverlayCanvas(canvas);\n        brushHistory.current.drawUnfilledPolygon(\n          ctx,\n          overmind.state.tool.polygonTool.vertices.slice().concat(mousePos),\n          false\n        );\n      });\n    }\n    onPaint();\n  }\n\n  public onMouseLeaveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n\n    clearOverlayCanvas(canvas);\n\n    if (overmind.state.tool.polygonTool.vertices.length > 0) {\n      if (this.filled) {\n        unfilledPolygon(ctx, new PixelBrush(), overmind.state.tool.polygonTool.vertices, false);\n      } else {\n        brushHistory.current.drawUnfilledPolygon(\n          ctx,\n          overmind.state.tool.polygonTool.vertices,\n          false\n        );\n      }\n      onPaint();\n    }\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/components/dialog/Dialog.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/MainCanvas.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/CanvasState.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/hooks.tsx",["444","445"],"import { Point } from '../../types';\nimport { useEffect } from 'react';\nimport { useOvermind } from '../../overmind';\nimport { undoBuffer } from '../../overmind/undo/UndoBuffer';\nimport { blobToCanvas } from './util';\nimport { EventHandlerParams, EventHandlerParamsOverlay } from '../../tools/Tool';\n//import { renderToCanvasFrom } from '../../colorIndex/ColorIndexer';\n\nexport function useInitTool(\n  eventHandlerParams: EventHandlerParams,\n  eventHandlerParamsOverlay: EventHandlerParamsOverlay,\n  isZoomCanvas: boolean\n): void {\n  const { state } = useOvermind();\n  useEffect((): void => {\n    if (!isZoomCanvas) {\n      state.toolbox.previousTool?.onExit?.(eventHandlerParams);\n      state.toolbox.previousTool?.onExitOverlay?.(eventHandlerParamsOverlay);\n    }\n  }, [state.toolbox.previousTool]);\n  useEffect((): void => {\n    if (!isZoomCanvas) {\n      state.toolbox.activeTool.onInit?.(eventHandlerParams);\n      state.toolbox.activeTool.onInitOverlay?.(eventHandlerParamsOverlay);\n    }\n  }, [state.toolbox.activeTool]);\n}\n\n// Update current fillStyle from state to canvas context when:\n// 1. fillStyle has been changed\n// 2. canvas resolution changes, as this also resets context\nexport function useFillStyle(ctx: CanvasRenderingContext2D | null): void {\n  const { state } = useOvermind();\n  useEffect((): void => {\n    if (ctx) {\n      ctx.fillStyle = state.canvas.fillStyle;\n      ctx.strokeStyle = state.canvas.fillStyle;\n    }\n  }, [state.canvas.fillStyle, state.canvas.resolution]);\n}\n\nexport function useUndo(canvas: HTMLCanvasElement): void {\n  const { state } = useOvermind();\n  useEffect((): void => {\n    //blobToCanvas(state.undo.currentBufferItem, canvas);\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      if (state.undo.currentIndex === null) {\n        return;\n      }\n      const colorIndex = undoBuffer.getItem(state.undo.currentIndex);\n      //renderToCanvasFrom(ctx, colorIndex);\n    }\n    console.log('undo hook end');\n  }, [state.undo.lastUndoRedoTime]);\n}\n\n// Load image to canvas when loadedImageURL changes\n// Changes canvas height and width to match image\nexport function useLoadedImage(canvas: HTMLCanvasElement): void {\n  const { state, actions } = useOvermind();\n  useEffect((): void => {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    const image = new Image();\n    image.onload = function (): void {\n      // No need to clear canvas, as changing dimensions clears it anyway.\n      // Note that context is also reset\n      actions.canvas.setResolution({ width: image.width, height: image.height });\n      ctx.drawImage(image, 0, 0);\n      actions.undo.setUndoPoint(canvas);\n      actions.canvas.setCanvasModified(false);\n    };\n    image.src = state.canvas.loadedImageURL;\n  }, [state.canvas.loadedImageURL]);\n}\n\nexport function useScrollToFocusPoint(\n  canvasDiv: HTMLDivElement,\n  focusPoint: Point | null,\n  zoomFactor = 1\n): void {\n  useEffect((): void => {\n    if (focusPoint === null) {\n      return;\n    }\n    const scrollOptions = {\n      left: focusPoint.x * zoomFactor - canvasDiv.clientWidth / 2,\n      top: focusPoint.y * zoomFactor - canvasDiv.clientHeight / 2,\n    };\n    canvasDiv.scrollTo(scrollOptions);\n  }, [focusPoint]);\n}\n",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxToggleButton.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/paletteEditor/PaletteEditor.tsx",["446"],"import React, { useRef } from 'react';\nimport { Button, Slider } from '@material-ui/core';\nimport './PaletteEditor.css';\nimport { useOvermind } from '../../overmind';\nimport { Color } from '../../types';\nimport { CanvasState } from '../canvas/CanvasState';\nimport { paintingCanvasController } from '../../canvas/paintingCanvas/PaintingCanvasController';\nimport { overlayCanvasController } from '../../canvas/overlayCanvas/OverlayCanvasController';\n\ninterface Props {\n  canvasState: CanvasState;\n}\n\nexport function PaletteEditor({ canvasState }: Props): JSX.Element | null {\n  const { state, actions } = useOvermind();\n\n  const overlayRef = useRef<HTMLDivElement>(document.createElement('div'));\n\n  const { mainCanvas } = canvasState;\n\n  // eslint-disable-next-line no-constant-condition\n  if (!state.paletteEditor.isOpen) {\n    return null;\n  }\n\n  function setR(value: number) {\n    const newColor: Color = {\n      r: value,\n      g: state.palette.foregroundColor.g,\n      b: state.palette.foregroundColor.b,\n    };\n    actions.palette.editColor({ colorId: state.palette.foregroundColorId, newColor: newColor });\n    paintingCanvasController.updatePalette();\n    overlayCanvasController.updatePalette();\n  }\n\n  return (\n    <>\n      <div className=\"modal-overlay\" ref={overlayRef}>\n        <div className=\"palette-editor-modal\">\n          <div className=\"modal-header\">\n            <p>Palette Editor</p>\n          </div>\n          <div className=\"sliders\">\n            <Slider\n              defaultValue={2}\n              aria-labelledby=\"discrete-slider-small-steps\"\n              step={1}\n              marks\n              min={0}\n              max={255}\n              valueLabelDisplay=\"auto\"\n              orientation=\"vertical\"\n              onChange={(event, value) => setR(Number(value))}\n            />\n          </div>\n\n          <Button variant=\"contained\" color=\"primary\" onClick={actions.paletteEditor.close}>\n            OK\n          </Button>\n          <Button variant=\"contained\" color=\"secondary\" onClick={actions.paletteEditor.close}>\n            Cancel\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/jani/Code/Web/dxpaint/src/components/GlobalHotkeyManager.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/Toolbox.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/dialog/DialogManager.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/palette/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/brush/index.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItem.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxActionButton.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/app/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/brush/actions.ts",["447","448"],"import { Action } from 'overmind';\nimport { BrushInterface } from '../../brush/Brush';\nimport { Mode, BuiltInBrushId, builtInBrushes } from './state';\nimport { CustomBrush } from '../../brush/CustomBrush';\nimport { brushHistory } from '../../brush/BrushHistory';\n\nexport const setBrush: Action<BrushInterface> = ({ state }, brush): void => {\n  brushHistory.set(brush);\n};\n\nexport const selectBuiltInBrush: Action<BuiltInBrushId> = (\n  { state, actions },\n  brushNumber\n): void => {\n  state.brush.selectedBuiltInBrushId = brushNumber;\n  actions.brush.setBrush(builtInBrushes[brushNumber]);\n  actions.brush.setMode('Color');\n};\n\nexport const setMode: Action<Mode> = ({ state }, mode): void => {\n  state.brush.mode = mode;\n  const brush = brushHistory.current;\n  if (brush instanceof CustomBrush) {\n    if (mode === 'Color') {\n      brush.setFGColor(state.palette.foregroundColor);\n      brush.setBGColor(state.palette.backgroundColor);\n      brush.toFGColor();\n    } else if (mode === 'Matte') {\n      brush.setBGColor(state.palette.backgroundColor);\n      brush.toMatte();\n    }\n  }\n};\n\nexport const toFGBrush: Action = ({ state }): void => {\n  const brush = brushHistory.current;\n  if (state.brush.mode === 'Color' && brush instanceof CustomBrush) {\n    brush.toFGColor();\n  }\n  if (state.brush.mode === 'Matte' && brush instanceof CustomBrush) {\n    brush.toMatte();\n  }\n};\n\nexport const toBGBrush: Action = ({ state }): void => {\n  const brush = brushHistory.current;\n  if (brush instanceof CustomBrush) {\n    brush.toBGColor();\n  }\n};\n","/Users/jani/Code/Web/dxpaint/src/tools/BrushSelector.tsx",["449"],"import {\n  Tool,\n  EventHandlerParamsWithEvent,\n  OverlayEventHandlerParamsWithEvent,\n  EventHandlerParams,\n} from './Tool';\nimport { getMousePos, clearOverlayCanvas, extractBrush } from './util/util';\nimport { overmind } from '../index';\nimport { selection } from './util/SelectionIndicator';\n\nexport class BrushSelector implements Tool {\n  public onInit(params: EventHandlerParams): void {\n    const {\n      ctx: { canvas },\n    } = params;\n    overmind.actions.tool.brushSelectionStart(null);\n    selection.prepare(canvas);\n  }\n\n  public onContextMenu(params: EventHandlerParamsWithEvent): void {\n    const { event } = params;\n    event.preventDefault();\n  }\n\n  public onMouseUp(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx: { canvas },\n    } = params;\n\n    const start = overmind.state.tool.brushSelectorTool.start;\n    if (!start) {\n      return;\n    }\n\n    const mousePos = getMousePos(canvas, event);\n    const width = mousePos.x - start.x;\n    const height = mousePos.y - start.y;\n\n    const brush = extractBrush(canvas, start, width, height);\n    overmind.actions.brush.setBrush(brush);\n    overmind.actions.brush.setMode('Matte');\n\n    // exit brush selection tool\n    overmind.actions.toolbox.toggleBrushSelectionMode();\n    // switch to Dotted Freehand tool after selection\n    overmind.actions.toolbox.setSelectedDrawingTool('dottedFreehand');\n  }\n\n  public onMouseDown(params: EventHandlerParamsWithEvent): void {\n    const { event, ctx } = params;\n    const mousePos = getMousePos(ctx.canvas, event);\n    overmind.actions.tool.brushSelectionStart(mousePos);\n  }\n\n  public onMouseLeave(params: EventHandlerParamsWithEvent): void {\n    overmind.actions.tool.brushSelectionStart(null);\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n\n    const mousePos = getMousePos(canvas, event);\n\n    const start = overmind.state.tool.brushSelectorTool.start;\n    if (!start) {\n      selection.edgeToEdgeCrosshair(ctx, mousePos);\n      onPaint();\n      return;\n    }\n\n    selection.box(ctx, start, mousePos);\n    onPaint();\n  }\n\n  public onMouseLeaveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n\n  public onMouseUpOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/tools/CircleTool.tsx",["450","451"],"/Users/jani/Code/Web/dxpaint/src/tools/ColorSelectorTool.tsx",["452","453"],"import { Tool, EventHandlerParamsWithEvent } from './Tool';\nimport { getMousePos } from './util/util';\nimport { overmind } from '../index';\nimport { paintingCanvasController } from '../canvas/paintingCanvas/PaintingCanvasController';\n\nexport class ColorSelectorTool implements Tool {\n  public constructor(foregroundColor: boolean) {\n    this.foregroundColor = foregroundColor;\n  }\n  private foregroundColor: boolean;\n\n  public onClick(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx: { canvas },\n    } = params;\n    const mousePos = getMousePos(canvas, event);\n    //const colorIndex = paintingCanvasController.colorIndexer?.getColorIndexForPixel(mousePos);\n    const colorIndex = 1;\n    if (!colorIndex) {\n      return;\n    }\n    if (this.foregroundColor) {\n      overmind.actions.palette.setForegroundColor(colorIndex.toString());\n      overmind.actions.toolbox.toggleForegroundColorSelectionMode();\n    } else {\n      overmind.actions.palette.setBackgroundColor(colorIndex.toString());\n      overmind.actions.toolbox.toggleBackgroundColorSelectionMode();\n    }\n  }\n\n  public onContextMenu(params: EventHandlerParamsWithEvent): void {\n    const { event } = params;\n    event.preventDefault();\n  }\n\n  // No overlay\n}\n","/Users/jani/Code/Web/dxpaint/src/tools/util/SelectionIndicator.tsx",["454","455","456","457"],"/Users/jani/Code/Web/dxpaint/src/overmind/dialog/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/canvas/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/tools/RectangleTool.tsx",["458","459"],"import {\n  Tool,\n  EventHandlerParamsWithEvent,\n  OverlayEventHandlerParamsWithEvent,\n  EventHandlerParams,\n} from './Tool';\nimport { getMousePos, clearOverlayCanvas, isRightMouseButton, omit } from './util/util';\nimport { Throttle } from './util/Throttle';\nimport { selection } from './util/SelectionIndicator';\nimport { overmind } from '../index';\nimport { brushHistory } from '../brush/BrushHistory';\nimport { paintingCanvasController } from '../canvas/paintingCanvas/PaintingCanvasController';\nimport { overlayCanvasController } from '../canvas/overlayCanvas/OverlayCanvasController';\n\nexport class RectangleTool implements Tool {\n  private throttle = new Throttle(50);\n\n  public constructor(filled: boolean) {\n    this.filled = filled;\n  }\n  private filled: boolean;\n\n  private prepareToPaint(withBGColor: boolean): void {\n    if (withBGColor) {\n      overmind.actions.tool.activeToolToBGFillStyle();\n      overmind.actions.brush.toBGBrush();\n    }\n  }\n\n  public onInit(params: EventHandlerParams): void {\n    const {\n      ctx: { canvas },\n    } = params;\n    selection.prepare(canvas);\n    overmind.actions.tool.rectangleToolStart(null);\n    overmind.actions.tool.activeToolToFGFillStyle();\n    overmind.actions.brush.toFGBrush();\n  }\n\n  public onContextMenu(params: EventHandlerParamsWithEvent): void {\n    const { event } = params;\n    event.preventDefault();\n  }\n\n  public onMouseUp(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n      undoPoint,\n    } = params;\n\n    const startPoint = overmind.state.tool.rectangleTool.start;\n    if (!startPoint) {\n      return;\n    }\n\n    const endPoint = getMousePos(canvas, event);\n\n    if (this.filled) {\n      brushHistory.current.drawFilledRect(ctx, startPoint, endPoint, paintingCanvasController);\n    } else {\n      brushHistory.current.drawUnfilledRect(ctx, startPoint, endPoint, paintingCanvasController);\n    }\n    undoPoint();\n    onPaint();\n    this.onInit(omit(params, 'event'));\n  }\n\n  public onMouseDown(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx: { canvas },\n    } = params;\n    this.prepareToPaint(isRightMouseButton(event));\n    const mousePos = getMousePos(canvas, event);\n    overmind.actions.tool.rectangleToolStart(mousePos);\n  }\n\n  public onMouseEnter(params: EventHandlerParamsWithEvent): void {\n    const { event } = params;\n    if (!event.buttons) {\n      this.onInit(omit(params, 'event'));\n    }\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n\n    const mousePos = getMousePos(canvas, event);\n\n    const startPoint = overmind.state.tool.rectangleTool.start;\n    if (!startPoint) {\n      clearOverlayCanvas(canvas);\n      if (!this.filled) {\n        // DPaint only draws unfilled shapes with the current brush\n        brushHistory.current.drawDot(ctx, mousePos, overlayCanvasController);\n      }\n      selection.edgeToEdgeCrosshair(ctx, mousePos);\n      onPaint();\n      return;\n    }\n\n    if (this.filled) {\n      clearOverlayCanvas(canvas);\n      brushHistory.current.drawFilledRect(ctx, startPoint, mousePos, overlayCanvasController);\n    } else {\n      this.throttle.call((): void => {\n        clearOverlayCanvas(canvas);\n        brushHistory.current.drawUnfilledRect(ctx, startPoint, mousePos, overlayCanvasController);\n      });\n    }\n    onPaint();\n  }\n\n  public onMouseLeaveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    overlayCanvasController.clear();\n    onPaint();\n  }\n\n  public onMouseUpOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    overlayCanvasController.clear();\n    onPaint();\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/tools/TextTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/undo/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/tools/DottedFreehandTool.tsx",["460"],"import {\n  Tool,\n  EventHandlerParamsWithEvent,\n  OverlayEventHandlerParamsWithEvent,\n  EventHandlerParams,\n} from './Tool';\nimport {\n  getMousePos,\n  clearOverlayCanvas,\n  isRightMouseButton,\n  omit,\n  isLeftOrRightMouseButton,\n} from './util/util';\nimport { overmind } from '../index';\nimport { brushHistory } from '../brush/BrushHistory';\n\nexport class DottedFreehandTool implements Tool {\n  private prepareToPaint(withBGColor: boolean): void {\n    if (withBGColor) {\n      overmind.actions.tool.activeToolToBGFillStyle();\n      overmind.actions.brush.toBGBrush();\n    }\n  }\n\n  public onInit(params: EventHandlerParams): void {\n    overmind.actions.tool.activeToolToFGFillStyle();\n    overmind.actions.brush.toFGBrush();\n  }\n\n  public onContextMenu(params: EventHandlerParamsWithEvent): void {\n    const { event } = params;\n    event.preventDefault();\n  }\n\n  public onMouseMove(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n\n    if (event.buttons) {\n      const mousePos = getMousePos(canvas, event);\n      brushHistory.current.drawDot(ctx, mousePos);\n      onPaint();\n    }\n  }\n\n  public onMouseDown(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n\n    const mousePos = getMousePos(canvas, event);\n    this.prepareToPaint(isRightMouseButton(event));\n    brushHistory.current.drawDot(ctx, mousePos);\n    onPaint();\n  }\n\n  public onMouseUp(params: EventHandlerParamsWithEvent): void {\n    const { undoPoint } = params;\n    this.onInit(omit(params, 'event'));\n    undoPoint();\n  }\n\n  public onMouseLeave(params: EventHandlerParamsWithEvent): void {\n    this.onInit(omit(params, 'event'));\n  }\n\n  public onMouseEnter(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx: { canvas },\n    } = params;\n    if (isLeftOrRightMouseButton(event)) {\n      this.prepareToPaint(isRightMouseButton(event));\n      const mousePos = getMousePos(canvas, event);\n      overmind.actions.tool.freeHandToolPrevious(mousePos);\n    }\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    if (event.buttons) {\n      return;\n    }\n    clearOverlayCanvas(canvas);\n\n    const mousePos = getMousePos(canvas, event);\n    brushHistory.current.drawDot(ctx, mousePos);\n    onPaint();\n  }\n\n  public onMouseDownOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n\n  public onMouseLeaveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/palette/ColorButton.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/palette/Palette.tsx",[],"/Users/jani/Code/Web/dxpaint/src/algorithm/primitive.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/undo/actions.ts",["461"],"/Users/jani/Code/Web/dxpaint/src/components/menubar/Menubar.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/util/util.tsx",["462","463","464"],"import { Point, Color } from '../../types';\nimport { Tool, EventHandlerParams, EventHandlerParamsOverlay } from '../Tool';\nimport { CustomBrush } from '../../brush/CustomBrush';\nimport { overmind } from '../../index';\nimport { paintingCanvasController } from '../../canvas/paintingCanvas/PaintingCanvasController';\n\nexport function colorToRGBString(color: Color): string {\n  return 'rgb(' + color.r + ',' + color.g + ',' + color.b + ')';\n}\n\nexport function getMousePos(\n  canvas: HTMLCanvasElement,\n  event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n): Point {\n  const rect = canvas.getBoundingClientRect(), // abs. size of element\n    scaleX = canvas.width / rect.width, // relationship bitmap vs. element for X\n    scaleY = canvas.height / rect.height; // relationship bitmap vs. element for Y\n\n  return {\n    x: Math.floor((event.clientX - rect.left) * scaleX), // scale mouse coordinates after they have\n    y: Math.floor((event.clientY - rect.top) * scaleY), // been adjusted to be relative to element\n  };\n}\n\nexport function pointEquals(point1: Point, point2: Point): boolean {\n  return point1.x === point2.x && point1.y === point2.y;\n}\n\nexport function points8Connected(point1: Point, point2: Point): boolean {\n  return Math.abs(point1.x - point2.x) <= 1 && Math.abs(point1.y - point2.y) <= 1;\n}\n\nexport function clearCanvas(canvas: HTMLCanvasElement, color: Color): void {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n  ctx.rect(0, 0, canvas.width, canvas.height);\n  const oldFillStyle = ctx.fillStyle;\n  ctx.fillStyle = colorToRGBString(color);\n  ctx.fill();\n  ctx.fillStyle = oldFillStyle;\n}\n\nexport function clearOverlayCanvas(canvas: HTMLCanvasElement): void {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n}\n\nexport function getEventHandler(\n  tool: Tool,\n  eventHandlerName:\n    | 'onClick'\n    | 'onContextMenu'\n    | 'onMouseMove'\n    | 'onMouseUp'\n    | 'onMouseDown'\n    | 'onMouseLeave'\n    | 'onMouseEnter',\n  eventHandlerParams: EventHandlerParams\n): (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void {\n  if (hasKey(tool, eventHandlerName)) {\n    return (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void =>\n      tool[eventHandlerName]!({ event: event, ...eventHandlerParams });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  return (): void => {};\n}\n\nexport function getEventHandlerOverlay(\n  tool: Tool,\n  eventHandlerName:\n    | 'onMouseMoveOverlay'\n    | 'onMouseLeaveOverlay'\n    | 'onMouseEnterOverlay'\n    | 'onMouseUpOverlay'\n    | 'onMouseDownOverlay'\n    | 'onClickOverlay',\n  eventHandlerParams: EventHandlerParamsOverlay\n): (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void {\n  if (hasKey(tool, eventHandlerName)) {\n    return (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void =>\n      tool[eventHandlerName]!({ event: event, ...eventHandlerParams });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  return (): void => {};\n}\n\nfunction hasKey<O>(obj: O, key: keyof any): key is keyof O {\n  return key in obj;\n}\n\nexport function isRightMouseButton(\n  event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n): boolean {\n  return event.button === 2 || event.buttons === 2;\n}\n\nexport function isLeftMouseButton(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): boolean {\n  return event.button === 1 || event.buttons === 1;\n}\n\nexport function isLeftOrRightMouseButton(\n  event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n): boolean {\n  return isLeftMouseButton(event) || isRightMouseButton(event);\n}\n\n// eslint-disable-next-line max-len\n// adapted from https://stackoverflow.com/questions/11472273/how-to-edit-pixels-and-remove-white-background-in-a-canvas-image-in-html5-and-ja\nexport function extractBrush(\n  sourceCanvas: HTMLCanvasElement,\n  start: Point,\n  width: number,\n  height: number\n): CustomBrush {\n  const bufferCanvas = document.createElement('canvas');\n\n  bufferCanvas.width = Math.abs(width);\n  bufferCanvas.height = Math.abs(height);\n\n  const bufferCanvasCtx = bufferCanvas.getContext('2d');\n  if (!bufferCanvasCtx) {\n    throw 'Error retrieving Context for buffer Canvas while extracting brush';\n  }\n\n  bufferCanvasCtx.drawImage(\n    sourceCanvas,\n    start.x,\n    start.y,\n    width,\n    height,\n    0,\n    0,\n    bufferCanvas.width,\n    bufferCanvas.height\n  );\n\n  const backgroundColor =\n    overmind.state.palette.backgroundColor.r * 0x00000001 +\n    overmind.state.palette.backgroundColor.g * 0x00000100 +\n    overmind.state.palette.backgroundColor.b * 0x00010000 +\n    255 * 0x01000000;\n\n  const imageData = bufferCanvasCtx.getImageData(0, 0, bufferCanvas.width, bufferCanvas.height);\n  const imageDataBufferTMP = new ArrayBuffer(imageData.data.length);\n  const imageDataClamped8TMP = new Uint8ClampedArray(imageDataBufferTMP);\n  const imageDataUint32TMP = new Uint32Array(imageDataBufferTMP);\n\n  imageDataClamped8TMP.set(imageData.data);\n\n  let n = imageDataUint32TMP.length;\n  while (n--) {\n    if (imageDataUint32TMP[n] === backgroundColor) {\n      imageDataUint32TMP[n] = 0x00000000; // make it transparent\n    }\n  }\n\n  imageData.data.set(imageDataClamped8TMP);\n  bufferCanvasCtx.putImageData(imageData, 0, 0);\n\n  // Extract color index and add tansparency for background color\n\n  const colorIndex = paintingCanvasController.getAreaFromIndex(start.x, start.y, width, height);\n  if (!colorIndex) {\n    throw 'Error retrieving color index for new brush';\n  }\n  const colorIndexWithTransparency = addTransparency(\n    colorIndex,\n    Number(overmind.state.palette.backgroundColorId)\n  );\n\n  // invert y\n\n  const colorIndexInverted = new Uint8Array(Math.abs(width) * Math.abs(height) * 4);\n  for (let y = 0; y < bufferCanvas.height; y++) {\n    for (let x = 0; x < bufferCanvas.width * 4; x++) {\n      const index = x + y * bufferCanvas.width * 4;\n      const indexOrig = x + (bufferCanvas.height - 1 - y) * (bufferCanvas.width * 4);\n      colorIndexInverted[index] = colorIndexWithTransparency[indexOrig];\n    }\n  }\n\n  return new CustomBrush(bufferCanvas.toDataURL(), colorIndexInverted);\n}\n\nexport function addTransparency(texture: Uint8Array, transparentColorIndex: number): Uint8Array {\n  return texture.map((item) => (item === transparentColorIndex ? 0 : item));\n}\n\ninterface Omit {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  <T extends object, K extends [...(keyof T)[]]>(obj: T, ...keys: K): {\n    [K2 in Exclude<keyof T, K[number]>]: T[K2];\n  };\n}\n\nexport const omit: Omit = (obj, ...keys) => {\n  const ret = {} as {\n    [K in keyof typeof obj]: typeof obj[K];\n  };\n  let key: keyof typeof obj;\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n};\n","/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/app/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/undo/UndoBuffer.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/util.tsx",[],"/Users/jani/Code/Web/dxpaint/src/serviceWorker.ts",["465","466"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/tools/FloodFillTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/program/GeometricIndexer.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/program/DrawImageRenderer.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/program/GeometricRenderer.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/PaintingCanvasController.ts",["467"],"/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/program/DrawImageIndexer.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/overlayCanvas/OverlayCanvasController.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/overlayCanvas/program/OverlayGeometricRenderer.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/overlayCanvas/OverlayMainCanvasRenderer.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/util/util.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/ZoomCanvasRenderer.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/ColorIndexer.ts",["468"],"/Users/jani/Code/Web/dxpaint/src/canvas/paintingCanvas/MainCanvasRenderer.ts",["469"],"/Users/jani/Code/Web/dxpaint/src/canvas/overlayCanvas/program/OverlayDrawImageRenderer.ts",[],"/Users/jani/Code/Web/dxpaint/src/domain/LineV.ts",[],"/Users/jani/Code/Web/dxpaint/src/domain/LineH.ts",[],"/Users/jani/Code/Web/dxpaint/src/domain/Line.ts",[],"/Users/jani/Code/Web/dxpaint/src/canvas/util/webglUtil.ts",[],{"ruleId":"470","severity":1,"message":"471","line":55,"column":10,"nodeType":"472","messageId":"473","endLine":55,"endColumn":20},{"ruleId":"470","severity":1,"message":"471","line":64,"column":10,"nodeType":"472","messageId":"473","endLine":64,"endColumn":27},{"ruleId":"474","severity":1,"message":"475","line":3,"column":10,"nodeType":"476","messageId":"477","endLine":3,"endColumn":19},{"ruleId":"474","severity":1,"message":"478","line":5,"column":3,"nodeType":"476","messageId":"477","endLine":5,"endColumn":7},{"ruleId":"474","severity":1,"message":"479","line":6,"column":3,"nodeType":"476","messageId":"477","endLine":6,"endColumn":13},{"ruleId":"474","severity":1,"message":"480","line":7,"column":3,"nodeType":"476","messageId":"477","endLine":7,"endColumn":17},{"ruleId":"474","severity":1,"message":"481","line":8,"column":3,"nodeType":"476","messageId":"477","endLine":8,"endColumn":15},{"ruleId":"474","severity":1,"message":"482","line":9,"column":3,"nodeType":"476","messageId":"477","endLine":9,"endColumn":8},{"ruleId":"474","severity":1,"message":"483","line":10,"column":3,"nodeType":"476","messageId":"477","endLine":10,"endColumn":16},{"ruleId":"474","severity":1,"message":"484","line":26,"column":10,"nodeType":"476","messageId":"477","endLine":26,"endColumn":15},{"ruleId":"474","severity":1,"message":"485","line":3,"column":10,"nodeType":"476","messageId":"477","endLine":3,"endColumn":14},{"ruleId":"474","severity":1,"message":"486","line":9,"column":3,"nodeType":"476","messageId":"477","endLine":9,"endColumn":21},{"ruleId":"474","severity":1,"message":"487","line":29,"column":17,"nodeType":"476","messageId":"477","endLine":29,"endColumn":43},{"ruleId":"474","severity":1,"message":"488","line":122,"column":14,"nodeType":"476","messageId":"477","endLine":122,"endColumn":20},{"ruleId":"474","severity":1,"message":"488","line":132,"column":14,"nodeType":"476","messageId":"477","endLine":132,"endColumn":20},{"ruleId":"474","severity":1,"message":"487","line":27,"column":17,"nodeType":"476","messageId":"477","endLine":27,"endColumn":43},{"ruleId":"470","severity":1,"message":"471","line":22,"column":26,"nodeType":"472","messageId":"473","endLine":22,"endColumn":39},{"ruleId":"474","severity":1,"message":"478","line":4,"column":3,"nodeType":"476","messageId":"477","endLine":4,"endColumn":7},{"ruleId":"474","severity":1,"message":"480","line":5,"column":3,"nodeType":"476","messageId":"477","endLine":5,"endColumn":17},{"ruleId":"474","severity":1,"message":"481","line":6,"column":3,"nodeType":"476","messageId":"477","endLine":6,"endColumn":15},{"ruleId":"474","severity":1,"message":"479","line":7,"column":3,"nodeType":"476","messageId":"477","endLine":7,"endColumn":13},{"ruleId":"474","severity":1,"message":"482","line":8,"column":3,"nodeType":"476","messageId":"477","endLine":8,"endColumn":8},{"ruleId":"474","severity":1,"message":"483","line":9,"column":3,"nodeType":"476","messageId":"477","endLine":9,"endColumn":16},{"ruleId":"474","severity":1,"message":"489","line":20,"column":10,"nodeType":"476","messageId":"477","endLine":20,"endColumn":18},{"ruleId":"474","severity":1,"message":"490","line":22,"column":10,"nodeType":"476","messageId":"477","endLine":22,"endColumn":21},{"ruleId":"474","severity":1,"message":"487","line":31,"column":17,"nodeType":"476","messageId":"477","endLine":31,"endColumn":43},{"ruleId":"474","severity":1,"message":"488","line":105,"column":14,"nodeType":"476","messageId":"477","endLine":105,"endColumn":20},{"ruleId":"474","severity":1,"message":"487","line":30,"column":17,"nodeType":"476","messageId":"477","endLine":30,"endColumn":43},{"ruleId":"474","severity":1,"message":"488","line":111,"column":14,"nodeType":"476","messageId":"477","endLine":111,"endColumn":20},{"ruleId":"474","severity":1,"message":"487","line":34,"column":17,"nodeType":"476","messageId":"477","endLine":34,"endColumn":43},{"ruleId":"474","severity":1,"message":"491","line":5,"column":10,"nodeType":"476","messageId":"477","endLine":5,"endColumn":22},{"ruleId":"474","severity":1,"message":"492","line":51,"column":13,"nodeType":"476","messageId":"477","endLine":51,"endColumn":23},{"ruleId":"474","severity":1,"message":"493","line":19,"column":11,"nodeType":"476","messageId":"477","endLine":19,"endColumn":21},{"ruleId":"474","severity":1,"message":"494","line":7,"column":52,"nodeType":"476","messageId":"477","endLine":7,"endColumn":57},{"ruleId":"474","severity":1,"message":"494","line":45,"column":37,"nodeType":"476","messageId":"477","endLine":45,"endColumn":42},{"ruleId":"474","severity":1,"message":"487","line":56,"column":23,"nodeType":"476","messageId":"477","endLine":56,"endColumn":58},{"ruleId":"474","severity":1,"message":"488","line":143,"column":14,"nodeType":"476","messageId":"477","endLine":143,"endColumn":20},{"ruleId":"474","severity":1,"message":"488","line":152,"column":14,"nodeType":"476","messageId":"477","endLine":152,"endColumn":20},{"ruleId":"474","severity":1,"message":"495","line":4,"column":10,"nodeType":"476","messageId":"477","endLine":4,"endColumn":34},{"ruleId":"474","severity":1,"message":"496","line":17,"column":11,"nodeType":"476","messageId":"477","endLine":17,"endColumn":19},{"ruleId":"474","severity":1,"message":"497","line":2,"column":10,"nodeType":"476","messageId":"477","endLine":2,"endColumn":20},{"ruleId":"474","severity":1,"message":"498","line":37,"column":38,"nodeType":"476","messageId":"477","endLine":37,"endColumn":50},{"ruleId":"474","severity":1,"message":"499","line":37,"column":52,"nodeType":"476","messageId":"477","endLine":37,"endColumn":62},{"ruleId":"474","severity":1,"message":"500","line":44,"column":45,"nodeType":"476","messageId":"477","endLine":44,"endColumn":59},{"ruleId":"474","severity":1,"message":"488","line":126,"column":14,"nodeType":"476","messageId":"477","endLine":126,"endColumn":20},{"ruleId":"474","severity":1,"message":"488","line":135,"column":14,"nodeType":"476","messageId":"477","endLine":135,"endColumn":20},{"ruleId":"474","severity":1,"message":"487","line":25,"column":17,"nodeType":"476","messageId":"477","endLine":25,"endColumn":43},{"ruleId":"474","severity":1,"message":"495","line":2,"column":10,"nodeType":"476","messageId":"477","endLine":2,"endColumn":34},{"ruleId":"470","severity":1,"message":"471","line":67,"column":7,"nodeType":"472","messageId":"473","endLine":67,"endColumn":30,"suggestions":"501"},{"ruleId":"470","severity":1,"message":"471","line":86,"column":7,"nodeType":"472","messageId":"473","endLine":86,"endColumn":30,"suggestions":"502"},{"ruleId":"503","severity":1,"message":"504","line":92,"column":39,"nodeType":"505","messageId":"506","endLine":92,"endColumn":42,"suggestions":"507"},{"ruleId":"508","severity":1,"message":"509","line":26,"column":8,"nodeType":"510","messageId":"511","endLine":26,"endColumn":42},{"ruleId":"508","severity":1,"message":"509","line":133,"column":8,"nodeType":"510","messageId":"511","endLine":133,"endColumn":29},{"ruleId":"474","severity":1,"message":"485","line":3,"column":10,"nodeType":"476","messageId":"477","endLine":3,"endColumn":14},{"ruleId":"474","severity":1,"message":"485","line":3,"column":10,"nodeType":"476","messageId":"477","endLine":3,"endColumn":14},{"ruleId":"474","severity":1,"message":"485","line":3,"column":10,"nodeType":"476","messageId":"477","endLine":3,"endColumn":14},"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","@typescript-eslint/no-unused-vars","'drawImage' is defined but never used.","Identifier","unusedVar","'line' is defined but never used.","'filledRect' is defined but never used.","'unfilledCircle' is defined but never used.","'filledCircle' is defined but never used.","'curve' is defined but never used.","'filledEllipse' is defined but never used.","'LineH' is defined but never used.","'Line' is defined but never used.","'clearOverlayCanvas' is defined but never used.","'params' is defined but never used.","'canvas' is assigned a value but never used.","'fillRect' is defined but never used.","'pointEquals' is defined but never used.","'blobToCanvas' is defined but never used.","'colorIndex' is assigned a value but never used.","'mainCanvas' is assigned a value but never used.","'state' is defined but never used.","'paintingCanvasController' is defined but never used.","'mousePos' is assigned a value but never used.","'PixelBrush' is defined but never used.","'start' is defined but never used.","'end' is defined but never used.","'height' is defined but never used.",["512"],["513"],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["514","515"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType",{"messageId":"516","fix":"517","desc":"518"},{"messageId":"516","fix":"519","desc":"518"},{"messageId":"520","fix":"521","desc":"522"},{"messageId":"523","fix":"524","desc":"525"},"suggestOptionalChain",{"range":"526","text":"527"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"528","text":"527"},"suggestUnknown",{"range":"529","text":"530"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"529","text":"531"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[2289,2290],"?.",[2928,2929],[3109,3112],"unknown","never"]