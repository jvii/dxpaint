[{"/Users/jani/Code/Web/dxpaint/src/index.tsx":"1","/Users/jani/Code/Web/dxpaint/src/components/App.tsx":"2","/Users/jani/Code/Web/dxpaint/src/components/canvas/ZoomCanvas.tsx":"3","/Users/jani/Code/Web/dxpaint/src/components/canvas/CanvasSyncHandler.tsx":"4","/Users/jani/Code/Web/dxpaint/src/components/toolbox/BuiltInBrushes.tsx":"5","/Users/jani/Code/Web/dxpaint/src/components/palette/ColorIndicator.tsx":"6","/Users/jani/Code/Web/dxpaint/src/overmind/canvas/index.ts":"7","/Users/jani/Code/Web/dxpaint/src/overmind/app/index.ts":"8","/Users/jani/Code/Web/dxpaint/src/overmind/tool/index.ts":"9","/Users/jani/Code/Web/dxpaint/src/brush/BrushHistory.ts":"10","/Users/jani/Code/Web/dxpaint/src/components/canvas/Canvas.tsx":"11","/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItemOpen.tsx":"12","/Users/jani/Code/Web/dxpaint/src/brush/CustomBrush.tsx":"13","/Users/jani/Code/Web/dxpaint/src/overmind/dialog/state.ts":"14","/Users/jani/Code/Web/dxpaint/src/overmind/dialog/actions.ts":"15","/Users/jani/Code/Web/dxpaint/src/overmind/palette/actions.ts":"16","/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/actions.ts":"17","/Users/jani/Code/Web/dxpaint/src/overmind/tool/state.ts":"18","/Users/jani/Code/Web/dxpaint/src/overmind/brush/state.ts":"19","/Users/jani/Code/Web/dxpaint/src/algorithm/shape.ts":"20","/Users/jani/Code/Web/dxpaint/src/tools/FreehandTool.tsx":"21","/Users/jani/Code/Web/dxpaint/src/components/palette/util.tsx":"22","/Users/jani/Code/Web/dxpaint/src/tools/EllipseTool.tsx":"23","/Users/jani/Code/Web/dxpaint/src/tools/AirbrushTool.tsx":"24","/Users/jani/Code/Web/dxpaint/src/brush/BuiltInBrushFactory.tsx":"25","/Users/jani/Code/Web/dxpaint/src/tools/util/Throttle.tsx":"26","/Users/jani/Code/Web/dxpaint/src/overmind/index.ts":"27","/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItemSave.tsx":"28","/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxDualToggleButton.tsx":"29","/Users/jani/Code/Web/dxpaint/src/tools/util/Debounce.tsx":"30","/Users/jani/Code/Web/dxpaint/src/overmind/canvas/state.ts":"31","/Users/jani/Code/Web/dxpaint/src/overmind/undo/state.ts":"32","/Users/jani/Code/Web/dxpaint/src/overmind/palette/state.ts":"33","/Users/jani/Code/Web/dxpaint/src/overmind/tool/actions.ts":"34","/Users/jani/Code/Web/dxpaint/src/colorIndex/indexer/IndexerContext.ts":"35","/Users/jani/Code/Web/dxpaint/src/brush/PixelBrush.tsx":"36","/Users/jani/Code/Web/dxpaint/src/tools/LineTool.tsx":"37","/Users/jani/Code/Web/dxpaint/src/tools/ZoomInitialPointSelectorTool.tsx":"38","/Users/jani/Code/Web/dxpaint/src/tools/CurveTool.tsx":"39","/Users/jani/Code/Web/dxpaint/src/tools/PolygonTool.tsx":"40","/Users/jani/Code/Web/dxpaint/src/components/dialog/Dialog.tsx":"41","/Users/jani/Code/Web/dxpaint/src/components/canvas/MainCanvas.tsx":"42","/Users/jani/Code/Web/dxpaint/src/components/canvas/CanvasState.tsx":"43","/Users/jani/Code/Web/dxpaint/src/components/canvas/hooks.tsx":"44","/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxToggleButton.tsx":"45","/Users/jani/Code/Web/dxpaint/src/components/paletteEditor/PaletteEditor.tsx":"46","/Users/jani/Code/Web/dxpaint/src/components/GlobalHotkeyManager.tsx":"47","/Users/jani/Code/Web/dxpaint/src/components/toolbox/Toolbox.tsx":"48","/Users/jani/Code/Web/dxpaint/src/components/dialog/DialogManager.tsx":"49","/Users/jani/Code/Web/dxpaint/src/overmind/palette/index.ts":"50","/Users/jani/Code/Web/dxpaint/src/overmind/brush/index.ts":"51","/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/index.ts":"52","/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItem.tsx":"53","/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxActionButton.tsx":"54","/Users/jani/Code/Web/dxpaint/src/overmind/app/actions.ts":"55","/Users/jani/Code/Web/dxpaint/src/overmind/brush/actions.ts":"56","/Users/jani/Code/Web/dxpaint/src/colorIndex/renderer/ColorIndexRenderer.ts":"57","/Users/jani/Code/Web/dxpaint/src/tools/BrushSelector.tsx":"58","/Users/jani/Code/Web/dxpaint/src/tools/CircleTool.tsx":"59","/Users/jani/Code/Web/dxpaint/src/tools/ColorSelectorTool.tsx":"60","/Users/jani/Code/Web/dxpaint/src/tools/util/SelectionIndicator.tsx":"61","/Users/jani/Code/Web/dxpaint/src/overmind/dialog/index.ts":"62","/Users/jani/Code/Web/dxpaint/src/overmind/canvas/actions.ts":"63","/Users/jani/Code/Web/dxpaint/src/tools/RectangleTool.tsx":"64","/Users/jani/Code/Web/dxpaint/src/tools/TextTool.tsx":"65","/Users/jani/Code/Web/dxpaint/src/overmind/undo/index.ts":"66","/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/state.ts":"67","/Users/jani/Code/Web/dxpaint/src/tools/DottedFreehandTool.tsx":"68","/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/actions.ts":"69","/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/state.ts":"70","/Users/jani/Code/Web/dxpaint/src/components/palette/ColorButton.tsx":"71","/Users/jani/Code/Web/dxpaint/src/components/palette/Palette.tsx":"72","/Users/jani/Code/Web/dxpaint/src/colorIndex/indexer/DrawImageIndexer.ts":"73","/Users/jani/Code/Web/dxpaint/src/algorithm/primitive.ts":"74","/Users/jani/Code/Web/dxpaint/src/colorIndex/util.ts":"75","/Users/jani/Code/Web/dxpaint/src/overmind/undo/actions.ts":"76","/Users/jani/Code/Web/dxpaint/src/components/menubar/Menubar.tsx":"77","/Users/jani/Code/Web/dxpaint/src/tools/util/util.tsx":"78","/Users/jani/Code/Web/dxpaint/src/components/canvas/ColorIndexerClass.ts":"79","/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/index.ts":"80","/Users/jani/Code/Web/dxpaint/src/overmind/app/state.ts":"81","/Users/jani/Code/Web/dxpaint/src/overmind/undo/UndoBuffer.ts":"82","/Users/jani/Code/Web/dxpaint/src/components/canvas/util.tsx":"83","/Users/jani/Code/Web/dxpaint/src/components/canvas/PaintingCanvasController.ts":"84","/Users/jani/Code/Web/dxpaint/src/colorIndex/renderer/DrawImageRenderer.ts":"85","/Users/jani/Code/Web/dxpaint/src/colorIndex/renderer/ColorIndexRendererClass.ts":"86","/Users/jani/Code/Web/dxpaint/src/colorIndex/renderer/GeometricRenderer.ts":"87","/Users/jani/Code/Web/dxpaint/src/serviceWorker.ts":"88","/Users/jani/Code/Web/dxpaint/src/tools/FloodFillTool.tsx":"89","/Users/jani/Code/Web/dxpaint/src/colorIndex/indexer/GeometricIndexer.ts":"90"},{"size":758,"mtime":1581006660054,"results":"91","hashOfConfig":"92"},{"size":1647,"mtime":1610123744119,"results":"93","hashOfConfig":"92"},{"size":2303,"mtime":1587397395180,"results":"94","hashOfConfig":"92"},{"size":1650,"mtime":1587397383935,"results":"95","hashOfConfig":"92"},{"size":4292,"mtime":1588883165180,"results":"96","hashOfConfig":"92"},{"size":1341,"mtime":1609964713351,"results":"97","hashOfConfig":"92"},{"size":99,"mtime":1570358386366,"results":"98","hashOfConfig":"92"},{"size":99,"mtime":1589653071467,"results":"99","hashOfConfig":"92"},{"size":99,"mtime":1581162181250,"results":"100","hashOfConfig":"92"},{"size":371,"mtime":1598417463850,"results":"101","hashOfConfig":"92"},{"size":4862,"mtime":1614854493506,"results":"102","hashOfConfig":"92"},{"size":712,"mtime":1586637521430,"results":"103","hashOfConfig":"92"},{"size":6649,"mtime":1600503071164,"results":"104","hashOfConfig":"92"},{"size":103,"mtime":1589645340777,"results":"105","hashOfConfig":"92"},{"size":238,"mtime":1589698799652,"results":"106","hashOfConfig":"92"},{"size":994,"mtime":1610288900130,"results":"107","hashOfConfig":"92"},{"size":2307,"mtime":1587665133808,"results":"108","hashOfConfig":"92"},{"size":3939,"mtime":1606591580738,"results":"109","hashOfConfig":"92"},{"size":775,"mtime":1598628605933,"results":"110","hashOfConfig":"92"},{"size":12084,"mtime":1614854880153,"results":"111","hashOfConfig":"92"},{"size":3863,"mtime":1615457319670,"results":"112","hashOfConfig":"92"},{"size":2427,"mtime":1598195635333,"results":"113","hashOfConfig":"92"},{"size":5449,"mtime":1598418063310,"results":"114","hashOfConfig":"92"},{"size":3269,"mtime":1598417920855,"results":"115","hashOfConfig":"92"},{"size":3137,"mtime":1614154844644,"results":"116","hashOfConfig":"92"},{"size":749,"mtime":1606592951751,"results":"117","hashOfConfig":"92"},{"size":1069,"mtime":1609948473281,"results":"118","hashOfConfig":"92"},{"size":419,"mtime":1586636737515,"results":"119","hashOfConfig":"92"},{"size":1288,"mtime":1582737326774,"results":"120","hashOfConfig":"92"},{"size":448,"mtime":1606592971846,"results":"121","hashOfConfig":"92"},{"size":990,"mtime":1606591610390,"results":"122","hashOfConfig":"92"},{"size":163,"mtime":1610827421065,"results":"123","hashOfConfig":"92"},{"size":787,"mtime":1610395467992,"results":"124","hashOfConfig":"92"},{"size":3492,"mtime":1598088214899,"results":"125","hashOfConfig":"92"},{"size":1955,"mtime":1613567118251,"results":"126","hashOfConfig":"92"},{"size":3615,"mtime":1615118367166,"results":"127","hashOfConfig":"92"},{"size":2865,"mtime":1615454049802,"results":"128","hashOfConfig":"92"},{"size":1686,"mtime":1596966551515,"results":"129","hashOfConfig":"92"},{"size":3062,"mtime":1598418004456,"results":"130","hashOfConfig":"92"},{"size":4424,"mtime":1598418176200,"results":"131","hashOfConfig":"92"},{"size":620,"mtime":1609948514564,"results":"132","hashOfConfig":"92"},{"size":1542,"mtime":1610828201690,"results":"133","hashOfConfig":"92"},{"size":1328,"mtime":1576359001814,"results":"134","hashOfConfig":"92"},{"size":3226,"mtime":1613738313456,"results":"135","hashOfConfig":"92"},{"size":849,"mtime":1582737330219,"results":"136","hashOfConfig":"92"},{"size":1947,"mtime":1613737455235,"results":"137","hashOfConfig":"92"},{"size":794,"mtime":1589698776952,"results":"138","hashOfConfig":"92"},{"size":5255,"mtime":1613737486628,"results":"139","hashOfConfig":"92"},{"size":1298,"mtime":1589699509988,"results":"140","hashOfConfig":"92"},{"size":99,"mtime":1570358390587,"results":"141","hashOfConfig":"92"},{"size":99,"mtime":1570358382606,"results":"142","hashOfConfig":"92"},{"size":99,"mtime":1570358454848,"results":"143","hashOfConfig":"92"},{"size":479,"mtime":1586285629987,"results":"144","hashOfConfig":"92"},{"size":691,"mtime":1582737314794,"results":"145","hashOfConfig":"92"},{"size":197,"mtime":1589653419630,"results":"146","hashOfConfig":"92"},{"size":1538,"mtime":1613232457299,"results":"147","hashOfConfig":"92"},{"size":7019,"mtime":1614878202455,"results":"148","hashOfConfig":"92"},{"size":2633,"mtime":1596966551507,"results":"149","hashOfConfig":"92"},{"size":3737,"mtime":1598417952306,"results":"150","hashOfConfig":"92"},{"size":1173,"mtime":1613738228063,"results":"151","hashOfConfig":"92"},{"size":2017,"mtime":1597691407920,"results":"152","hashOfConfig":"92"},{"size":99,"mtime":1589645298846,"results":"153","hashOfConfig":"92"},{"size":1599,"mtime":1614852177384,"results":"154","hashOfConfig":"92"},{"size":3623,"mtime":1598418204617,"results":"155","hashOfConfig":"92"},{"size":3797,"mtime":1596966551513,"results":"156","hashOfConfig":"92"},{"size":99,"mtime":1570358463891,"results":"157","hashOfConfig":"92"},{"size":3476,"mtime":1606591793814,"results":"158","hashOfConfig":"92"},{"size":2892,"mtime":1598418027518,"results":"159","hashOfConfig":"92"},{"size":221,"mtime":1609964687396,"results":"160","hashOfConfig":"92"},{"size":94,"mtime":1609948309696,"results":"161","hashOfConfig":"92"},{"size":1140,"mtime":1610122119190,"results":"162","hashOfConfig":"92"},{"size":2782,"mtime":1610122387748,"results":"163","hashOfConfig":"92"},{"size":6009,"mtime":1613307455776,"results":"164","hashOfConfig":"92"},{"size":3111,"mtime":1613738274657,"results":"165","hashOfConfig":"92"},{"size":1386,"mtime":1615455356821,"results":"166","hashOfConfig":"92"},{"size":1163,"mtime":1613737742327,"results":"167","hashOfConfig":"92"},{"size":3361,"mtime":1610827576318,"results":"168","hashOfConfig":"92"},{"size":6347,"mtime":1615409776721,"results":"169","hashOfConfig":"92"},{"size":6777,"mtime":1615116704586,"results":"170","hashOfConfig":"92"},{"size":99,"mtime":1609948228471,"results":"171","hashOfConfig":"92"},{"size":129,"mtime":1589653235884,"results":"172","hashOfConfig":"92"},{"size":424,"mtime":1611407191206,"results":"173","hashOfConfig":"92"},{"size":758,"mtime":1587585448269,"results":"174","hashOfConfig":"92"},{"size":3244,"mtime":1615479106055,"results":"175","hashOfConfig":"92"},{"size":3907,"mtime":1615218916590,"results":"176","hashOfConfig":"92"},{"size":3306,"mtime":1615216510790,"results":"177","hashOfConfig":"92"},{"size":5539,"mtime":1615455547311,"results":"178","hashOfConfig":"92"},{"size":5183,"mtime":1615012131754,"results":"179","hashOfConfig":"92"},{"size":4028,"mtime":1584903623805,"results":"180","hashOfConfig":"92"},{"size":6541,"mtime":1615479121596,"results":"181","hashOfConfig":"92"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},"1plr3f1",{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"198"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"236","messages":"237","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"201"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"201"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"248","messages":"249","errorCount":2,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"198"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"255"},{"filePath":"256","messages":"257","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"198"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"255"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"201"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"187"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"201"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"201"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"198"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"201"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"255"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"302"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"358","messages":"359","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"360","messages":"361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"198"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"255"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"255"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"377","messages":"378","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jani/Code/Web/dxpaint/src/index.tsx",[],[],"/Users/jani/Code/Web/dxpaint/src/components/App.tsx",[],[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/ZoomCanvas.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/CanvasSyncHandler.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/BuiltInBrushes.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/palette/ColorIndicator.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/canvas/index.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/app/index.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/tool/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/brush/BrushHistory.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/Canvas.tsx",["386","387"],"import React, { useEffect, useRef } from 'react';\nimport { CanvasStateAction } from './CanvasState';\nimport { useInitTool, useUndo, useFillStyle } from './hooks';\nimport { useOvermind } from '../../overmind';\nimport { getEventHandler, getEventHandlerOverlay } from '../../tools/util/util';\nimport { EventHandlerParams, EventHandlerParamsOverlay } from '../../tools/Tool';\nimport './Canvas.css';\nimport { paintingCanvasController } from './PaintingCanvasController';\n\ninterface Props {\n  canvasDispatch: React.Dispatch<CanvasStateAction>;\n  isZoomCanvas: boolean;\n  zoomFactor?: number;\n}\n\nexport function Canvas({\n  canvasDispatch,\n  isZoomCanvas,\n  zoomFactor = 1,\n}: Props): JSX.Element | null {\n  console.log('render ' + (isZoomCanvas ? 'ZoomCanvas' : 'MainCanvas'));\n  const canvasRef = useRef<HTMLCanvasElement>(document.createElement('canvas'));\n  const overlayCanvasRef = useRef<HTMLCanvasElement>(document.createElement('canvas'));\n  const paintingCanvasRef = useRef<HTMLCanvasElement>(document.createElement('canvas'));\n\n  useEffect((): void => {\n    canvasDispatch({\n      type: isZoomCanvas ? 'setZoomCanvas' : 'setMainCanvas',\n      elements: { canvas: canvasRef.current, overlay: overlayCanvasRef.current },\n    });\n    if (isZoomCanvas) {\n      paintingCanvasController.attachZoomCanvas(paintingCanvasRef.current);\n    } else {\n      paintingCanvasController.attachMainCanvas(paintingCanvasRef.current);\n    }\n  }, []);\n\n  const canvasCtx = canvasRef.current.getContext('2d', {\n    alpha: false,\n    desynchronized: false, // desynchronized caused various problems with Windows version of Chrome\n  }) as CanvasRenderingContext2D | null;\n\n  const overlayCanvasCtx = overlayCanvasRef.current.getContext('2d', {\n    alpha: true,\n    desynchronized: false, // desynchronized caused various problems with Windows version of Chrome\n  }) as CanvasRenderingContext2D | null;\n\n  const { state, actions } = useOvermind();\n\n  const eventHandlerParams: EventHandlerParams = {\n    ctx: canvasCtx!,\n    onPaint: (): void => {\n      //actions.canvas.setCanvasModified(isZoomCanvas);\n    },\n    undoPoint: (): void => {\n      actions.undo.setUndoPoint(canvasRef.current);\n    },\n  };\n  const eventHandlerParamsOverlay: EventHandlerParamsOverlay = {\n    ctx: overlayCanvasCtx!,\n    onPaint: (): void => {\n      //actions.canvas.setOverlayCanvasModified(isZoomCanvas);\n    },\n  };\n\n  useUndo(canvasRef.current);\n  useInitTool(eventHandlerParams, eventHandlerParamsOverlay, isZoomCanvas);\n\n  useFillStyle(canvasCtx);\n  useFillStyle(overlayCanvasCtx);\n\n  if (!canvasCtx || !overlayCanvasCtx) {\n    return null; // no render\n  }\n\n  const tool = state.toolbox.activeTool;\n\n  const CSSZoom = {\n    width: state.canvas.resolution.width * zoomFactor,\n    height: state.canvas.resolution.height * zoomFactor,\n  };\n\n  return (\n    <>\n      <canvas\n        className=\"canvas\"\n        ref={canvasRef}\n        width={state.canvas.resolution.width}\n        height={state.canvas.resolution.height}\n        style={CSSZoom}\n        onClick={(event): void => {\n          getEventHandler(tool, 'onClick', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onClickOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onMouseDown={(event): void => {\n          getEventHandler(tool, 'onMouseDown', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onMouseDownOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onMouseUp={(event): void => {\n          getEventHandler(tool, 'onMouseUp', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onMouseUpOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onMouseEnter={(event): void => {\n          getEventHandler(tool, 'onMouseEnter', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onMouseEnterOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onMouseLeave={(event): void => {\n          getEventHandler(tool, 'onMouseLeave', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onMouseLeaveOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onMouseMove={(event): void => {\n          getEventHandler(tool, 'onMouseMove', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onMouseMoveOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onContextMenu={getEventHandler(tool, 'onContextMenu', eventHandlerParams)}\n      />\n      <canvas\n        className=\"canvas canvas--overlay\"\n        ref={paintingCanvasRef}\n        width={state.canvas.resolution.width}\n        height={state.canvas.resolution.height}\n        style={CSSZoom}\n      />\n      <canvas\n        className=\"canvas canvas--overlay\"\n        ref={overlayCanvasRef}\n        width={state.canvas.resolution.width}\n        height={state.canvas.resolution.height}\n        style={CSSZoom}\n      />\n    </>\n  );\n}\n","/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItemOpen.tsx",[],"/Users/jani/Code/Web/dxpaint/src/brush/CustomBrush.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/dialog/state.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/dialog/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/palette/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/tool/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/brush/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/algorithm/shape.ts",[],"/Users/jani/Code/Web/dxpaint/src/tools/FreehandTool.tsx",["388"],"import {\n  Tool,\n  EventHandlerParamsWithEvent,\n  OverlayEventHandlerParamsWithEvent,\n  EventHandlerParams,\n} from './Tool';\nimport {\n  getMousePos,\n  clearOverlayCanvas,\n  isRightMouseButton,\n  isLeftOrRightMouseButton,\n  omit,\n  pointEquals,\n  points8Connected,\n} from './util/util';\nimport { overmind } from '../index';\nimport { brushHistory } from '../brush/BrushHistory';\nimport { paintingCanvasController } from '../components/canvas/PaintingCanvasController';\n\nexport class FreehandTool implements Tool {\n  private prepareToPaint(withBGColor: boolean): void {\n    if (withBGColor) {\n      overmind.actions.tool.activeToolToBGFillStyle();\n      overmind.actions.brush.toBGBrush();\n    }\n  }\n\n  public onInit(params: EventHandlerParams): void {\n    overmind.actions.tool.freeHandToolPrevious(null);\n    overmind.actions.tool.activeToolToFGFillStyle();\n    overmind.actions.brush.toFGBrush();\n  }\n\n  public onContextMenu(params: EventHandlerParamsWithEvent): void {\n    const { event } = params;\n    event.preventDefault();\n  }\n\n  public onMouseMove(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n\n    if (event.buttons && overmind.state.tool.freehandTool.previous) {\n      const mousePos = getMousePos(canvas, event);\n      const start = overmind.state.tool.freehandTool.previous;\n      const end = mousePos;\n      if (pointEquals(start, end)) {\n        return; // this point has already been drawn to canvas\n      }\n\n      if (points8Connected(start, end)) {\n        // TODO: pitäisikö ctx tilalta olla parametrina CanvasController-tyyppinen olio\n        // (PaintingCanvasController tai OverlayCanvasController)?\n        brushHistory.current.drawDot(ctx, end, paintingCanvasController);\n      } else {\n        brushHistory.current.drawLine(ctx, start, end, paintingCanvasController);\n      }\n      //brushHistory.current.drawLine(ctx, start, end, paintingCanvasController);\n      overmind.actions.tool.freeHandToolPrevious(end);\n      onPaint();\n    }\n  }\n\n  public onMouseDown(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    const mousePos = getMousePos(canvas, event);\n    this.prepareToPaint(isRightMouseButton(event));\n    brushHistory.current.drawDot(ctx, mousePos, paintingCanvasController);\n    overmind.actions.tool.freeHandToolPrevious(mousePos);\n    onPaint();\n  }\n\n  public onMouseUp(params: EventHandlerParamsWithEvent): void {\n    const { undoPoint } = params;\n    this.onInit(omit(params, 'event'));\n    undoPoint();\n  }\n\n  public onMouseLeave(params: EventHandlerParamsWithEvent): void {\n    this.onInit(omit(params, 'event'));\n  }\n\n  public onMouseEnter(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx: { canvas },\n    } = params;\n    if (isLeftOrRightMouseButton(event)) {\n      this.prepareToPaint(isRightMouseButton(event));\n      const mousePos = getMousePos(canvas, event);\n      overmind.actions.tool.freeHandToolPrevious(mousePos);\n    }\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    if (event.buttons) {\n      return;\n    }\n    clearOverlayCanvas(canvas);\n    const mousePos = getMousePos(canvas, event);\n    brushHistory.current.drawDot(ctx, mousePos);\n    onPaint();\n  }\n\n  public onMouseDownOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n\n  public onMouseLeaveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/components/palette/util.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/EllipseTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/AirbrushTool.tsx",["389","390"],"import {\n  Tool,\n  EventHandlerParamsWithEvent,\n  OverlayEventHandlerParamsWithEvent,\n  EventHandlerParams,\n} from './Tool';\nimport {\n  getMousePos,\n  clearOverlayCanvas,\n  isRightMouseButton,\n  isLeftOrRightMouseButton,\n  omit,\n} from './util/util';\nimport { overmind } from '../index';\nimport { brushHistory } from '../brush/BrushHistory';\n\nexport class AirbrushTool implements Tool {\n  private timeout = 0;\n\n  private prepareToPaint(withBGColor: boolean): void {\n    if (withBGColor) {\n      overmind.actions.tool.activeToolToBGFillStyle();\n      overmind.actions.brush.toBGBrush();\n    }\n  }\n\n  public onInit(params: EventHandlerParams): void {\n    overmind.actions.tool.activeToolToFGFillStyle();\n    overmind.actions.brush.toFGBrush();\n  }\n\n  public onContextMenu(params: EventHandlerParamsWithEvent): void {\n    const { event } = params;\n    event.preventDefault();\n  }\n\n  public onMouseMove(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx: { canvas },\n    } = params;\n\n    const mousePos = getMousePos(canvas, event);\n    overmind.actions.tool.airbrushToolPosition(mousePos);\n  }\n\n  public onMouseDown(params: EventHandlerParamsWithEvent): void {\n    const { event, ctx, onPaint } = params;\n\n    const draw = (ctx: CanvasRenderingContext2D, onPaint: Function): void => {\n      for (let i = 50; i--; ) {\n        const angle = getRandomFloat(0, Math.PI * 2);\n        const radius = getRandomFloat(0, 20);\n        if (overmind.state.tool.airbrushTool.position) {\n          brushHistory.current.drawDot(ctx, {\n            x: overmind.state.tool.airbrushTool.position.x + radius * Math.cos(angle),\n            y: overmind.state.tool.airbrushTool.position.y + radius * Math.sin(angle),\n          });\n        }\n      }\n      onPaint();\n      this.timeout = setTimeout(draw, 20, ctx, onPaint);\n    };\n\n    this.prepareToPaint(isRightMouseButton(event));\n    this.timeout = setTimeout(draw, 20, ctx, onPaint);\n  }\n\n  public onMouseUp(params: EventHandlerParamsWithEvent): void {\n    const { undoPoint } = params;\n    clearTimeout(this.timeout);\n    this.onInit(omit(params, 'event'));\n    undoPoint();\n  }\n\n  public onMouseLeave(params: EventHandlerParamsWithEvent): void {\n    const { event, undoPoint } = params;\n    clearTimeout(this.timeout);\n    this.onInit(omit(params, 'event'));\n    if (isLeftOrRightMouseButton(event)) {\n      undoPoint();\n    }\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    if (event.buttons) {\n      return;\n    }\n    clearOverlayCanvas(canvas);\n\n    const mousePos = getMousePos(canvas, event);\n    brushHistory.current.drawDot(ctx, mousePos);\n    onPaint();\n  }\n\n  public onMouseDownOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n\n  public onMouseLeaveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n}\n\nfunction getRandomFloat(min: number, max: number): number {\n  return Math.random() * (max - min) + min;\n}\n","/Users/jani/Code/Web/dxpaint/src/brush/BuiltInBrushFactory.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/util/Throttle.tsx",["391"],"export class Throttle {\n  private milliSecs: number;\n  private lastFunc: NodeJS.Timeout | null;\n  private lastRan: number | null;\n\n  public constructor(milliSecs: number) {\n    this.milliSecs = milliSecs;\n    this.lastFunc = null;\n    this.lastRan = null;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  public call(func: Function): void {\n    if (!this.lastRan) {\n      func();\n      this.lastRan = Date.now();\n    } else {\n      if (this.lastFunc) {\n        clearTimeout(this.lastFunc);\n      }\n      this.lastFunc = setTimeout(() => {\n        if (Date.now() - this.lastRan! >= this.milliSecs) {\n          func();\n          this.lastRan = Date.now();\n        }\n      }, this.milliSecs - (Date.now() - this.lastRan));\n    }\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/overmind/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItemSave.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxDualToggleButton.tsx",["392","393"],"import React from 'react';\n\ninterface Props {\n  buttonClass: string;\n  isLowerHalfSelected: boolean;\n  isUpperHalfSelected: boolean;\n  onUpperHalfClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onLowerHalfClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport function ToolboxDualToggleButton({\n  buttonClass,\n  isLowerHalfSelected,\n  isUpperHalfSelected,\n  onUpperHalfClick,\n  onLowerHalfClick,\n}: Props): JSX.Element {\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    if (isLowerHalfClick(event)) {\n      onLowerHalfClick(event);\n    } else {\n      onUpperHalfClick(event);\n    }\n  };\n  let modifier = buttonClass;\n  if (isLowerHalfSelected) {\n    modifier = modifier + '-lower-half-selected';\n  }\n  if (isUpperHalfSelected) {\n    modifier = modifier + '-upper-half-selected';\n  }\n  return (\n    <button\n      className={'toolbox__button toolbox__button--' + modifier}\n      onClick={handleClick}\n    ></button>\n  );\n}\n\nfunction isLowerHalfClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>): boolean {\n  let x = event.nativeEvent.offsetX;\n  let y = 35 - event.nativeEvent.offsetY; // TODO: fix magic number\n  if (y <= x) {\n    return true;\n  } else {\n    return false;\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/tools/util/Debounce.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/canvas/state.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/undo/state.ts",["394"],"export type State = {\n  currentIndex: number | null;\n  lastUndoRedoTime: number;\n};\n\nexport const state: State = {\n  currentIndex: null,\n  lastUndoRedoTime: 0,\n};\n","/Users/jani/Code/Web/dxpaint/src/overmind/palette/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/tool/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/colorIndex/indexer/IndexerContext.ts",["395"],"export function createIndexerGLContext(\n  width: number,\n  height: number,\n  backgroundColorId: number\n): WebGLRenderingContext {\n  // init a webgl context for a canvas element outside the DOM\n\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  const gl = canvas.getContext('webgl', {\n    preserveDrawingBuffer: true,\n    antialias: false,\n  });\n\n  if (!gl) {\n    alert('Sorry, ReDPaint requires WebGL support:(');\n    throw 'Sorry, ReDPaint requires WebGL support';\n  }\n\n  // create a texture to render to: TODO: why do we need a texture to render to here?\n\n  /* const targetTexture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, targetTexture);\n\n  const level = 0;\n  const internalFormat = gl.RGBA;\n  const targetTextureWidth = gl.drawingBufferWidth;\n  const targetTextureHeight = gl.drawingBufferHeight;\n  const border = 0;\n  const format = gl.RGBA;\n  const type = gl.UNSIGNED_BYTE;\n  // initialize the color index matrix with the initial background color\n  const backgroundColor = Number(backgroundColorId);\n  const data = new Uint8Array(gl.drawingBufferHeight * gl.drawingBufferWidth * 4).fill(\n    backgroundColor\n  );\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    level,\n    internalFormat,\n    targetTextureWidth,\n    targetTextureHeight,\n    border,\n    format,\n    type,\n    data\n  );\n\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n  // create and bind the framebuffer\n\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n\n  // attach the texture as the first color attachment\n\n  const attachmentPoint = gl.COLOR_ATTACHMENT0;\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, targetTexture, level); */\n\n  console.log('Indexer webgl context initialized');\n\n  return gl;\n}\n","/Users/jani/Code/Web/dxpaint/src/brush/PixelBrush.tsx",["396","397"],"/Users/jani/Code/Web/dxpaint/src/tools/LineTool.tsx",["398"],"/Users/jani/Code/Web/dxpaint/src/tools/ZoomInitialPointSelectorTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/CurveTool.tsx",["399"],"import {\n  Tool,\n  EventHandlerParamsWithEvent,\n  OverlayEventHandlerParamsWithEvent,\n  EventHandlerParams,\n} from './Tool';\nimport {\n  getMousePos,\n  clearOverlayCanvas,\n  isRightMouseButton,\n  isLeftOrRightMouseButton,\n  omit,\n} from './util/util';\nimport { Throttle } from './util/Throttle';\nimport { overmind } from '../index';\nimport { brushHistory } from '../brush/BrushHistory';\n\nexport class CurveTool implements Tool {\n  private throttle = new Throttle(50);\n\n  private prepareToPaint(withBGColor: boolean): void {\n    if (withBGColor) {\n      overmind.actions.tool.activeToolToBGFillStyle();\n      overmind.actions.brush.toBGBrush();\n    }\n  }\n\n  public onInit(params: EventHandlerParams): void {\n    overmind.actions.tool.curveToolReset();\n    overmind.actions.tool.activeToolToFGFillStyle();\n    overmind.actions.brush.toFGBrush();\n  }\n\n  public onContextMenu(params: EventHandlerParamsWithEvent): void {\n    const { event } = params;\n    event.preventDefault();\n  }\n\n  public onMouseUp(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      undoPoint,\n      onPaint,\n    } = params;\n\n    const startPoint = overmind.state.tool.curveTool.start;\n    if (!startPoint) {\n      return;\n    }\n\n    const mousePos = getMousePos(canvas, event);\n    const endPoint = overmind.state.tool.curveTool.end;\n\n    if (endPoint) {\n      brushHistory.current.drawCurve(ctx, startPoint, endPoint, mousePos);\n      undoPoint();\n      onPaint();\n      this.onInit(omit(params, 'event'));\n    } else {\n      overmind.actions.tool.curveToolEnd(mousePos);\n    }\n  }\n\n  public onMouseDown(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx: { canvas },\n    } = params;\n\n    if (!overmind.state.tool.curveTool.end) {\n      this.prepareToPaint(isRightMouseButton(event));\n      const mousePos = getMousePos(canvas, event);\n      overmind.actions.tool.curveToolStart(mousePos);\n    }\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    const mousePos = getMousePos(canvas, event);\n\n    const startPoint = overmind.state.tool.curveTool.start;\n    if (!startPoint) {\n      clearOverlayCanvas(canvas);\n      brushHistory.current.drawDot(ctx, mousePos);\n      onPaint();\n      return;\n    }\n\n    const endPoint = overmind.state.tool.curveTool.end;\n    if (endPoint) {\n      this.throttle.call((): void => {\n        clearOverlayCanvas(canvas);\n        brushHistory.current.drawCurve(ctx, startPoint, endPoint, mousePos);\n      });\n    } else if (isLeftOrRightMouseButton(event)) {\n      this.throttle.call((): void => {\n        clearOverlayCanvas(canvas);\n        brushHistory.current.drawLine(ctx, startPoint, mousePos);\n      });\n    }\n    onPaint();\n  }\n\n  public onMouseLeaveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/tools/PolygonTool.tsx",["400"],"import {\n  Tool,\n  EventHandlerParamsWithEvent,\n  OverlayEventHandlerParamsWithEvent,\n  EventHandlerParams,\n} from './Tool';\nimport {\n  getMousePos,\n  clearOverlayCanvas,\n  isRightMouseButton,\n  pointEquals,\n  omit,\n} from './util/util';\nimport { overmind } from '../index';\nimport { Throttle } from './util/Throttle';\nimport { unfilledPolygon } from '../algorithm/shape';\nimport { PixelBrush } from '../brush/PixelBrush';\nimport { brushHistory } from '../brush/BrushHistory';\n\nexport class PolygonTool implements Tool {\n  private throttle = new Throttle(20);\n  public constructor(filled: boolean) {\n    this.filled = filled;\n  }\n  private filled: boolean;\n\n  private prepareToPaint(withBGColor: boolean): void {\n    if (withBGColor) {\n      overmind.actions.tool.activeToolToBGFillStyle();\n      overmind.actions.brush.toBGBrush();\n    }\n  }\n\n  public onInit(params: EventHandlerParams): void {\n    overmind.actions.tool.polygonToolReset();\n    overmind.actions.tool.activeToolToFGFillStyle();\n    overmind.actions.brush.toFGBrush();\n  }\n\n  public onContextMenu(params: EventHandlerParamsWithEvent): void {\n    const { event } = params;\n    event.preventDefault();\n  }\n\n  public onMouseDown(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      undoPoint,\n      onPaint,\n    } = params;\n    const mousePos = getMousePos(canvas, event);\n\n    // first click (left or right) determines polygon fill color\n    if (!overmind.state.tool.polygonTool.vertices.length) {\n      this.prepareToPaint(isRightMouseButton(event));\n      overmind.actions.tool.polygonToolAddVertice(mousePos);\n      return;\n    }\n\n    // complete polygon on right click or if starting point reselected\n    if (\n      isRightMouseButton(event) ||\n      pointEquals(overmind.state.tool.polygonTool.vertices[0], mousePos)\n    ) {\n      if (this.filled) {\n        brushHistory.current.drawFilledPolygon(ctx, overmind.state.tool.polygonTool.vertices);\n      } else {\n        brushHistory.current.drawUnfilledPolygon(ctx, overmind.state.tool.polygonTool.vertices);\n      }\n      undoPoint();\n      onPaint();\n      this.onInit(omit(params, 'event'));\n      return;\n    }\n\n    // otherwise just add new vertice\n    overmind.actions.tool.polygonToolAddVertice(mousePos);\n  }\n\n  // Overlay\n\n  public onMouseDownOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n\n    if (overmind.state.tool.polygonTool.vertices.length > 1) {\n      if (this.filled) {\n        unfilledPolygon(ctx, new PixelBrush(), overmind.state.tool.polygonTool.vertices, false);\n      } else {\n        brushHistory.current.drawUnfilledPolygon(\n          ctx,\n          overmind.state.tool.polygonTool.vertices,\n          false\n        );\n      }\n    }\n    onPaint();\n  }\n\n  public onMouseMoveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n\n    const mousePos = getMousePos(canvas, event);\n\n    if (!overmind.state.tool.polygonTool.vertices.length) {\n      clearOverlayCanvas(canvas);\n      brushHistory.current.drawDot(ctx, mousePos);\n      onPaint();\n      return;\n    }\n\n    if (this.filled) {\n      this.throttle.call((): void => {\n        clearOverlayCanvas(canvas);\n        unfilledPolygon(\n          ctx,\n          new PixelBrush(),\n          overmind.state.tool.polygonTool.vertices.slice().concat(mousePos),\n          false\n        );\n      });\n    } else {\n      this.throttle.call((): void => {\n        clearOverlayCanvas(canvas);\n        brushHistory.current.drawUnfilledPolygon(\n          ctx,\n          overmind.state.tool.polygonTool.vertices.slice().concat(mousePos),\n          false\n        );\n      });\n    }\n    onPaint();\n  }\n\n  public onMouseLeaveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n\n    clearOverlayCanvas(canvas);\n\n    if (overmind.state.tool.polygonTool.vertices.length > 0) {\n      if (this.filled) {\n        unfilledPolygon(ctx, new PixelBrush(), overmind.state.tool.polygonTool.vertices, false);\n      } else {\n        brushHistory.current.drawUnfilledPolygon(\n          ctx,\n          overmind.state.tool.polygonTool.vertices,\n          false\n        );\n      }\n      onPaint();\n    }\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/components/dialog/Dialog.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/MainCanvas.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/CanvasState.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/hooks.tsx",["401","402"],"import { Point } from '../../types';\nimport { useEffect } from 'react';\nimport { useOvermind } from '../../overmind';\nimport { undoBuffer } from '../../overmind/undo/UndoBuffer';\nimport { blobToCanvas } from './util';\nimport { EventHandlerParams, EventHandlerParamsOverlay } from '../../tools/Tool';\n//import { renderToCanvasFrom } from '../../colorIndex/ColorIndexer';\n\nexport function useInitTool(\n  eventHandlerParams: EventHandlerParams,\n  eventHandlerParamsOverlay: EventHandlerParamsOverlay,\n  isZoomCanvas: boolean\n): void {\n  const { state } = useOvermind();\n  useEffect((): void => {\n    if (!isZoomCanvas) {\n      state.toolbox.previousTool?.onExit?.(eventHandlerParams);\n      state.toolbox.previousTool?.onExitOverlay?.(eventHandlerParamsOverlay);\n    }\n  }, [state.toolbox.previousTool]);\n  useEffect((): void => {\n    if (!isZoomCanvas) {\n      state.toolbox.activeTool.onInit?.(eventHandlerParams);\n      state.toolbox.activeTool.onInitOverlay?.(eventHandlerParamsOverlay);\n    }\n  }, [state.toolbox.activeTool]);\n}\n\n// Update current fillStyle from state to canvas context when:\n// 1. fillStyle has been changed\n// 2. canvas resolution changes, as this also resets context\nexport function useFillStyle(ctx: CanvasRenderingContext2D | null): void {\n  const { state } = useOvermind();\n  useEffect((): void => {\n    if (ctx) {\n      ctx.fillStyle = state.canvas.fillStyle;\n      ctx.strokeStyle = state.canvas.fillStyle;\n    }\n  }, [state.canvas.fillStyle, state.canvas.resolution]);\n}\n\nexport function useUndo(canvas: HTMLCanvasElement): void {\n  const { state } = useOvermind();\n  useEffect((): void => {\n    //blobToCanvas(state.undo.currentBufferItem, canvas);\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      if (state.undo.currentIndex === null) {\n        return;\n      }\n      const colorIndex = undoBuffer.getItem(state.undo.currentIndex);\n      //renderToCanvasFrom(ctx, colorIndex);\n    }\n    console.log('undo hook end');\n  }, [state.undo.lastUndoRedoTime]);\n}\n\n// Load image to canvas when loadedImageURL changes\n// Changes canvas height and width to match image\nexport function useLoadedImage(canvas: HTMLCanvasElement): void {\n  const { state, actions } = useOvermind();\n  useEffect((): void => {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    const image = new Image();\n    image.onload = function (): void {\n      // No need to clear canvas, as changing dimensions clears it anyway.\n      // Note that context is also reset\n      actions.canvas.setResolution({ width: image.width, height: image.height });\n      ctx.drawImage(image, 0, 0);\n      actions.undo.setUndoPoint(canvas);\n      actions.canvas.setCanvasModified(false);\n    };\n    image.src = state.canvas.loadedImageURL;\n  }, [state.canvas.loadedImageURL]);\n}\n\nexport function useScrollToFocusPoint(\n  canvasDiv: HTMLDivElement,\n  focusPoint: Point | null,\n  zoomFactor = 1\n): void {\n  useEffect((): void => {\n    if (focusPoint === null) {\n      return;\n    }\n    const scrollOptions = {\n      left: focusPoint.x * zoomFactor - canvasDiv.clientWidth / 2,\n      top: focusPoint.y * zoomFactor - canvasDiv.clientHeight / 2,\n    };\n    canvasDiv.scrollTo(scrollOptions);\n  }, [focusPoint]);\n}\n","/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxToggleButton.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/paletteEditor/PaletteEditor.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/GlobalHotkeyManager.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/Toolbox.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/dialog/DialogManager.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/palette/index.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/brush/index.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItem.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxActionButton.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/app/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/brush/actions.ts",["403","404"],"import { Action } from 'overmind';\nimport { BrushInterface } from '../../brush/Brush';\nimport { Mode, BuiltInBrushId, builtInBrushes } from './state';\nimport { CustomBrush } from '../../brush/CustomBrush';\nimport { brushHistory } from '../../brush/BrushHistory';\n\nexport const setBrush: Action<BrushInterface> = ({ state }, brush): void => {\n  brushHistory.set(brush);\n};\n\nexport const selectBuiltInBrush: Action<BuiltInBrushId> = (\n  { state, actions },\n  brushNumber\n): void => {\n  state.brush.selectedBuiltInBrushId = brushNumber;\n  actions.brush.setBrush(builtInBrushes[brushNumber]);\n  actions.brush.setMode('Color');\n};\n\nexport const setMode: Action<Mode> = ({ state }, mode): void => {\n  state.brush.mode = mode;\n  const brush = brushHistory.current;\n  if (brush instanceof CustomBrush) {\n    if (mode === 'Color') {\n      brush.setFGColor(state.palette.foregroundColor);\n      brush.setBGColor(state.palette.backgroundColor);\n      brush.toFGColor();\n    } else if (mode === 'Matte') {\n      brush.setBGColor(state.palette.backgroundColor);\n      brush.toMatte();\n    }\n  }\n};\n\nexport const toFGBrush: Action = ({ state }): void => {\n  const brush = brushHistory.current;\n  if (state.brush.mode === 'Color' && brush instanceof CustomBrush) {\n    brush.toFGColor();\n  }\n  if (state.brush.mode === 'Matte' && brush instanceof CustomBrush) {\n    brush.toMatte();\n  }\n};\n\nexport const toBGBrush: Action = ({ state }): void => {\n  const brush = brushHistory.current;\n  if (brush instanceof CustomBrush) {\n    brush.toBGColor();\n  }\n};\n","/Users/jani/Code/Web/dxpaint/src/colorIndex/renderer/ColorIndexRenderer.ts",[],"/Users/jani/Code/Web/dxpaint/src/tools/BrushSelector.tsx",["405"],"import {\n  Tool,\n  EventHandlerParamsWithEvent,\n  OverlayEventHandlerParamsWithEvent,\n  EventHandlerParams,\n} from './Tool';\nimport { getMousePos, clearOverlayCanvas, extractBrush } from './util/util';\nimport { overmind } from '../index';\nimport { selection } from './util/SelectionIndicator';\n\nexport class BrushSelector implements Tool {\n  public onInit(params: EventHandlerParams): void {\n    const {\n      ctx: { canvas },\n    } = params;\n    overmind.actions.tool.brushSelectionStart(null);\n    selection.prepare(canvas);\n  }\n\n  public onContextMenu(params: EventHandlerParamsWithEvent): void {\n    const { event } = params;\n    event.preventDefault();\n  }\n\n  public onMouseUp(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx: { canvas },\n    } = params;\n\n    const start = overmind.state.tool.brushSelectorTool.start;\n    if (!start) {\n      return;\n    }\n\n    const mousePos = getMousePos(canvas, event);\n    const width = mousePos.x - start.x;\n    const height = mousePos.y - start.y;\n\n    const brush = extractBrush(canvas, start, width, height);\n    overmind.actions.brush.setBrush(brush);\n    overmind.actions.brush.setMode('Matte');\n\n    // exit brush selection tool\n    overmind.actions.toolbox.toggleBrushSelectionMode();\n    // switch to Dotted Freehand tool after selection\n    overmind.actions.toolbox.setSelectedDrawingTool('dottedFreehand');\n  }\n\n  public onMouseDown(params: EventHandlerParamsWithEvent): void {\n    const { event, ctx } = params;\n    const mousePos = getMousePos(ctx.canvas, event);\n    overmind.actions.tool.brushSelectionStart(mousePos);\n  }\n\n  public onMouseLeave(params: EventHandlerParamsWithEvent): void {\n    overmind.actions.tool.brushSelectionStart(null);\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n\n    const mousePos = getMousePos(canvas, event);\n\n    const start = overmind.state.tool.brushSelectorTool.start;\n    if (!start) {\n      selection.edgeToEdgeCrosshair(ctx, mousePos);\n      onPaint();\n      return;\n    }\n\n    selection.box(ctx, start, mousePos);\n    onPaint();\n  }\n\n  public onMouseLeaveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n\n  public onMouseUpOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/tools/CircleTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/ColorSelectorTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/util/SelectionIndicator.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/dialog/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/canvas/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/tools/RectangleTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/TextTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/undo/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/tools/DottedFreehandTool.tsx",["406"],"import {\n  Tool,\n  EventHandlerParamsWithEvent,\n  OverlayEventHandlerParamsWithEvent,\n  EventHandlerParams,\n} from './Tool';\nimport {\n  getMousePos,\n  clearOverlayCanvas,\n  isRightMouseButton,\n  omit,\n  isLeftOrRightMouseButton,\n} from './util/util';\nimport { overmind } from '../index';\nimport { brushHistory } from '../brush/BrushHistory';\n\nexport class DottedFreehandTool implements Tool {\n  private prepareToPaint(withBGColor: boolean): void {\n    if (withBGColor) {\n      overmind.actions.tool.activeToolToBGFillStyle();\n      overmind.actions.brush.toBGBrush();\n    }\n  }\n\n  public onInit(params: EventHandlerParams): void {\n    overmind.actions.tool.activeToolToFGFillStyle();\n    overmind.actions.brush.toFGBrush();\n  }\n\n  public onContextMenu(params: EventHandlerParamsWithEvent): void {\n    const { event } = params;\n    event.preventDefault();\n  }\n\n  public onMouseMove(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n\n    if (event.buttons) {\n      const mousePos = getMousePos(canvas, event);\n      brushHistory.current.drawDot(ctx, mousePos);\n      onPaint();\n    }\n  }\n\n  public onMouseDown(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n\n    const mousePos = getMousePos(canvas, event);\n    this.prepareToPaint(isRightMouseButton(event));\n    brushHistory.current.drawDot(ctx, mousePos);\n    onPaint();\n  }\n\n  public onMouseUp(params: EventHandlerParamsWithEvent): void {\n    const { undoPoint } = params;\n    this.onInit(omit(params, 'event'));\n    undoPoint();\n  }\n\n  public onMouseLeave(params: EventHandlerParamsWithEvent): void {\n    this.onInit(omit(params, 'event'));\n  }\n\n  public onMouseEnter(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx: { canvas },\n    } = params;\n    if (isLeftOrRightMouseButton(event)) {\n      this.prepareToPaint(isRightMouseButton(event));\n      const mousePos = getMousePos(canvas, event);\n      overmind.actions.tool.freeHandToolPrevious(mousePos);\n    }\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    if (event.buttons) {\n      return;\n    }\n    clearOverlayCanvas(canvas);\n\n    const mousePos = getMousePos(canvas, event);\n    brushHistory.current.drawDot(ctx, mousePos);\n    onPaint();\n  }\n\n  public onMouseDownOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n\n  public onMouseLeaveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/palette/ColorButton.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/palette/Palette.tsx",[],"/Users/jani/Code/Web/dxpaint/src/colorIndex/indexer/DrawImageIndexer.ts",[],"/Users/jani/Code/Web/dxpaint/src/algorithm/primitive.ts",[],"/Users/jani/Code/Web/dxpaint/src/colorIndex/util.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/undo/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/menubar/Menubar.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/util/util.tsx",["407","408","409"],"/Users/jani/Code/Web/dxpaint/src/components/canvas/ColorIndexerClass.ts",["410"],"import { FillRectIndexer } from '../../colorIndex/indexer/FillRectIndexer';\nimport { DrawImageIndexer } from '../../colorIndex/indexer/DrawImageIndexer';\nimport { CustomBrush } from '../../brush/CustomBrush';\nimport { overmind } from '../../index';\nimport { createIndexerGLContext } from '../../colorIndex/indexer/IndexerContext';\nimport { Line, Point } from '../../types';\nimport { visualiseTexture } from '../../colorIndex/util';\n\nclass ColorIndexerClass {\n  private gl: WebGLRenderingContext;\n  private fillRectIndexer: FillRectIndexer;\n  private drawImageIndexer: DrawImageIndexer;\n\n  constructor() {\n    this.gl = createIndexerGLContext(0, 0, 0);\n\n    // create indexers\n\n    this.fillRectIndexer = new FillRectIndexer(this.gl);\n    this.drawImageIndexer = new DrawImageIndexer(this.gl);\n  }\n\n  init(): void {\n    const width = overmind.state.canvas.resolution.width;\n    const height = overmind.state.canvas.resolution.height;\n    const backgroundColorId = Number(overmind.state.palette.backgroundColorId);\n    console.log(`ColorIndexer init, width=${width}, heigth=${height}`);\n    this.gl = createIndexerGLContext(width, height, backgroundColorId);\n\n    // create indexers\n\n    this.fillRectIndexer = new FillRectIndexer(this.gl);\n    this.drawImageIndexer = new DrawImageIndexer(this.gl);\n  }\n\n  fillRect(x: number, y: number, width: number, heigth: number, colorIndex: number): void {\n    this.fillRectIndexer.indexFillRect(x, y, width, heigth, colorIndex);\n  }\n\n  points(points: Point[], colorIndex: number): void {\n    this.fillRectIndexer.indexPoints(points, colorIndex);\n  }\n\n  lines(lines: Line[], colorIndex: number): void {\n    this.fillRectIndexer.indexLines(lines, colorIndex);\n  }\n\n  drawImage(x: number, y: number, brush: CustomBrush): void {\n    this.drawImageIndexer.indexDrawImage(x, y, brush);\n  }\n\n  getIndexAsCanvas(): HTMLCanvasElement | OffscreenCanvas {\n    return this.gl.canvas;\n  }\n\n  getIndex(): Uint8Array {\n    const pixels = new Uint8Array(this.gl.drawingBufferHeight * this.gl.drawingBufferWidth * 4);\n    this.gl.readPixels(\n      0,\n      0,\n      this.gl.drawingBufferWidth,\n      this.gl.drawingBufferHeight,\n      this.gl.RGBA,\n      this.gl.UNSIGNED_BYTE,\n      pixels\n    );\n    return pixels;\n  }\n\n  resetIndex(): void {\n    /* const gl = this.gl;\n\n    // create a texture to render to\n\n    const targetTexture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, targetTexture);\n\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const targetTextureWidth = gl.drawingBufferWidth;\n    const targetTextureHeight = gl.drawingBufferHeight;\n    const border = 0;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n    // initialize the color index matrix with the background color\n    const backgroundColor = Number(overmind.state.palette.backgroundColorId);\n    const data = new Uint8Array(gl.drawingBufferHeight * gl.drawingBufferWidth * 4).fill(\n      backgroundColor\n    );\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      level,\n      internalFormat,\n      targetTextureWidth,\n      targetTextureHeight,\n      border,\n      format,\n      type,\n      data\n    );\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    // create and bind the framebuffer\n\n    const fb = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n\n    // attach the texture as the first color attachment\n\n    const attachmentPoint = gl.COLOR_ATTACHMENT0;\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, targetTexture, level);\n    */\n  }\n\n  setIndex(index: Uint8Array | null): void {\n    /* if (!index) {\n      return;\n    }\n\n    const gl = this.gl;\n\n    // create a texture to render to\n\n    const targetTexture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, targetTexture);\n\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const targetTextureWidth = gl.drawingBufferWidth;\n    const targetTextureHeight = gl.drawingBufferHeight;\n    const border = 0;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      level,\n      internalFormat,\n      targetTextureWidth,\n      targetTextureHeight,\n      border,\n      format,\n      type,\n      index\n    );\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    // create and bind the framebuffer\n\n    const fb = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n\n    // attach the texture as the first color attachment\n\n    const attachmentPoint = gl.COLOR_ATTACHMENT0;\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, targetTexture, level);\n    */\n  }\n\n  getAreaFromIndex(\n    x: number, // canvas coord (origin upper left corner)\n    y: number, // canvas coord (origin upper left corner)\n    width: number, // canvas coord, can be negative\n    height: number // canvas coord, can be negative\n  ): Uint8Array | undefined {\n    const gl = this.gl;\n\n    // for readPixels we need to define the area with:\n    // - lower left corner of the area and\n    // - width and height as positive integers\n    // Texture coordinates\n\n    let rectLowerLeftX: number;\n    let rectLowerLeftY: number;\n\n    if (width < 0) {\n      rectLowerLeftX = x - Math.abs(width);\n    } else {\n      rectLowerLeftX = x;\n    }\n\n    if (height < 0) {\n      rectLowerLeftY = gl.drawingBufferHeight - y;\n    } else {\n      rectLowerLeftY = gl.drawingBufferHeight - y - Math.abs(height);\n    }\n\n    const pixels = new Uint8Array(Math.abs(width) * Math.abs(height) * 4);\n    console.log('canvas: x:' + x + ' y: ' + y + ' w: ' + width + ' h: ' + height);\n    console.log(\n      'texture: x:' +\n        rectLowerLeftX +\n        ' y: ' +\n        rectLowerLeftY +\n        ' w: ' +\n        Math.abs(width) +\n        ' h: ' +\n        Math.abs(height)\n    );\n    console.log('gl.drawingBufferHeight: ' + gl.drawingBufferHeight);\n    gl.readPixels(\n      rectLowerLeftX,\n      rectLowerLeftY,\n      Math.abs(width),\n      Math.abs(height),\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      pixels\n    );\n    return pixels;\n  }\n\n  getColorIndexForPixel(point: Point): number | undefined {\n    const colorIndex = this.getAreaFromIndex(point.x, point.y, 1, 1);\n    return colorIndex?.[0];\n  }\n\n  // testing, debugging purposes only\n  visualiseIndex(): void {\n    const index = this.getIndex();\n    const width = this.gl.drawingBufferWidth;\n    visualiseTexture(index, width);\n  }\n}\n\nexport const colorIndexer = new ColorIndexerClass();\n","/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/app/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/undo/UndoBuffer.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/util.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/PaintingCanvasController.ts",[],"/Users/jani/Code/Web/dxpaint/src/colorIndex/renderer/DrawImageRenderer.ts",[],"/Users/jani/Code/Web/dxpaint/src/colorIndex/renderer/ColorIndexRendererClass.ts",[],"/Users/jani/Code/Web/dxpaint/src/colorIndex/renderer/GeometricRenderer.ts",["411"],"/* eslint-disable max-len */\nimport { colorIndexer } from '../../components/canvas/ColorIndexerClass';\nimport { Line, Point } from '../../types';\nimport { canvasToWebGLCoordInvert, canvasToWebGLCoordX, canvasToWebGLCoordY } from '../util';\n\nexport class GeometricRenderer {\n  private gl: WebGLRenderingContext;\n  private program: WebGLProgram | null = null;\n\n  public constructor(gl: WebGLRenderingContext) {\n    this.gl = gl;\n    this.initShaders();\n  }\n\n  public renderPoints(points: Point[]): void {\n    const gl = this.gl;\n\n    if (!this.program) {\n      return;\n    }\n    if (gl.getParameter(gl.CURRENT_PROGRAM) !== this.program) {\n      console.log('switching webgl program GeometricRenderer');\n      gl.useProgram(this.program);\n    }\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // update color index texture\n\n    gl.activeTexture(gl.TEXTURE0);\n    const level = 0;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n    const indexCanvas = colorIndexer.getIndexAsCanvas();\n    gl.texSubImage2D(gl.TEXTURE_2D, level, 0, 0, format, type, indexCanvas);\n\n    const vertices = new Float32Array(2 * points.length);\n    vertices[0] = canvasToWebGLCoordX(gl, points[0].x);\n    vertices[1] = canvasToWebGLCoordInvert(gl, points[0].y);\n\n    const resolution = gl.getUniformLocation(this.program, 'resolution');\n    this.gl.uniform2f(resolution, gl.canvas.width, gl.canvas.height);\n\n    this.gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.DYNAMIC_DRAW);\n    this.gl.drawArrays(gl.POINTS, 0, points.length);\n  }\n\n  public renderLines(lines: Line[]): void {\n    const gl = this.gl;\n\n    if (!this.program) {\n      return;\n    }\n    if (gl.getParameter(gl.CURRENT_PROGRAM) !== this.program) {\n      console.log('switching webgl program GeometricRenderer');\n      gl.useProgram(this.program);\n    }\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // update color index texture\n\n    gl.activeTexture(gl.TEXTURE0);\n    const level = 0;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n    const indexCanvas = colorIndexer.getIndexAsCanvas();\n    gl.texSubImage2D(gl.TEXTURE_2D, level, 0, 0, format, type, indexCanvas);\n\n    const vertices = new Float32Array(2 * 2 * lines.length);\n    vertices[0] = canvasToWebGLCoordX(gl, lines[0].p1.x);\n    vertices[1] = canvasToWebGLCoordInvert(gl, lines[0].p1.y);\n    vertices[2] = canvasToWebGLCoordX(gl, lines[0].p2.x);\n    vertices[3] = canvasToWebGLCoordInvert(gl, lines[0].p2.y);\n\n    const resolution = gl.getUniformLocation(this.program, 'resolution');\n    this.gl.uniform2f(resolution, gl.canvas.width, gl.canvas.height);\n\n    this.gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.DYNAMIC_DRAW);\n    this.gl.drawArrays(gl.LINES, 0, 2 * lines.length);\n    //this.gl.drawArrays(gl.POINTS, 0, 2 * lines.length);\n  }\n\n  private initShaders(): void {\n    const vertexShader = `\n    attribute vec4 a_Position;\n\n    void main () {\n      gl_Position = a_Position;\n      gl_PointSize = 1.0;\n    }\n    `;\n\n    const fragmentShader = `\n    precision mediump float;\n\n    uniform vec2 resolution;\n    uniform sampler2D u_image;\n    uniform sampler2D u_palette;\n\n    void main() {\n      vec2 position = vec2((gl_FragCoord.x) / (resolution.x), 1.0 - (gl_FragCoord.y / (resolution.y)));\n      float index = texture2D(u_image, position).r * 255.0 - 1.0;\n      if (index < 0.1) {\n        gl_FragColor = vec4(1,1,1,1);\n      }\n      else {\n        gl_FragColor = texture2D(u_palette, vec2((index + 0.5) / 256.0, 0.5));\n      }\n      //gl_FragColor = vec4(1,1,1,1);\n    }\n    `;\n\n    const gl = this.gl;\n\n    const vs = gl.createShader(gl.VERTEX_SHADER);\n    if (!vs) {\n      return;\n    }\n    gl.shaderSource(vs, vertexShader);\n    gl.compileShader(vs);\n\n    // Catch some possible errors on vertex shader\n    if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {\n      console.error(gl.getShaderInfoLog(vs));\n    }\n\n    const fs = gl.createShader(gl.FRAGMENT_SHADER);\n    if (!fs) {\n      return;\n    }\n    gl.shaderSource(fs, fragmentShader);\n    gl.compileShader(fs);\n\n    // Catch some possible errors on fragment shader\n    if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {\n      console.error(gl.getShaderInfoLog(fs));\n    }\n\n    // Compile the program\n    const program = gl.createProgram();\n    if (!program) {\n      return;\n    }\n    this.program = program;\n    gl.attachShader(program, vs);\n    gl.attachShader(program, fs);\n    gl.linkProgram(program);\n    gl.useProgram(program);\n\n    // Catch some possible errors on program\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      console.error(gl.getProgramInfoLog(program));\n    }\n\n    // tell it to use texture units 0 and 1 for the image and palette\n\n    const imageLoc = gl.getUniformLocation(program, 'u_image');\n    const paletteLoc = gl.getUniformLocation(program, 'u_palette');\n    gl.uniform1i(imageLoc, 0);\n    gl.uniform1i(paletteLoc, 1);\n\n    // Create a buffer object for vertex coordinates\n    const vertexBuffer = gl.createBuffer();\n    if (!vertexBuffer) {\n      console.log('Failed to create the buffer object ');\n      return;\n    }\n\n    // Bind the buffer object to target\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n\n    const a_Position = gl.getAttribLocation(program, 'a_Position');\n\n    // Assign the buffer object to a_Position variable\n    gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, 0, 0);\n\n    // Enable the assignment to a_Position variable\n    gl.enableVertexAttribArray(a_Position);\n\n    console.log('Program ready (GeometricRenderer)');\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/serviceWorker.ts",["412","413"],"/Users/jani/Code/Web/dxpaint/src/tools/FloodFillTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/colorIndex/indexer/GeometricIndexer.ts",[],{"ruleId":"414","severity":1,"message":"415","line":51,"column":10,"nodeType":"416","messageId":"417","endLine":51,"endColumn":20},{"ruleId":"414","severity":1,"message":"415","line":60,"column":10,"nodeType":"416","messageId":"417","endLine":60,"endColumn":27},{"ruleId":"418","severity":1,"message":"419","line":28,"column":17,"nodeType":"420","messageId":"421","endLine":28,"endColumn":43},{"ruleId":"418","severity":1,"message":"419","line":27,"column":17,"nodeType":"420","messageId":"421","endLine":27,"endColumn":43},{"ruleId":"422","severity":2,"message":"423","line":50,"column":59,"nodeType":"420","messageId":"424","endLine":50,"endColumn":67},{"ruleId":"414","severity":1,"message":"415","line":22,"column":26,"nodeType":"416","messageId":"417","endLine":22,"endColumn":39},{"ruleId":"425","severity":2,"message":"426","line":41,"column":7,"nodeType":"420","messageId":"427","endLine":41,"endColumn":8,"fix":"428"},{"ruleId":"425","severity":2,"message":"429","line":42,"column":7,"nodeType":"420","messageId":"427","endLine":42,"endColumn":8,"fix":"430"},{"ruleId":"431","severity":2,"message":"432","line":1,"column":1,"nodeType":null,"endLine":3,"endColumn":1,"fix":"433"},{"ruleId":"418","severity":1,"message":"434","line":4,"column":3,"nodeType":"420","messageId":"421","endLine":4,"endColumn":28},{"ruleId":"418","severity":1,"message":"435","line":4,"column":3,"nodeType":"420","messageId":"421","endLine":4,"endColumn":7},{"ruleId":"418","severity":1,"message":"436","line":18,"column":10,"nodeType":"420","messageId":"421","endLine":18,"endColumn":21},{"ruleId":"418","severity":1,"message":"419","line":30,"column":17,"nodeType":"420","messageId":"421","endLine":30,"endColumn":43},{"ruleId":"418","severity":1,"message":"419","line":28,"column":17,"nodeType":"420","messageId":"421","endLine":28,"endColumn":43},{"ruleId":"418","severity":1,"message":"419","line":34,"column":17,"nodeType":"420","messageId":"421","endLine":34,"endColumn":43},{"ruleId":"418","severity":1,"message":"437","line":5,"column":10,"nodeType":"420","messageId":"421","endLine":5,"endColumn":22},{"ruleId":"418","severity":1,"message":"438","line":51,"column":13,"nodeType":"420","messageId":"421","endLine":51,"endColumn":23},{"ruleId":"418","severity":1,"message":"439","line":7,"column":52,"nodeType":"420","messageId":"421","endLine":7,"endColumn":57},{"ruleId":"418","severity":1,"message":"439","line":45,"column":37,"nodeType":"420","messageId":"421","endLine":45,"endColumn":42},{"ruleId":"418","severity":1,"message":"419","line":56,"column":23,"nodeType":"420","messageId":"421","endLine":56,"endColumn":58},{"ruleId":"418","severity":1,"message":"419","line":25,"column":17,"nodeType":"420","messageId":"421","endLine":25,"endColumn":43},{"ruleId":"414","severity":1,"message":"415","line":67,"column":7,"nodeType":"416","messageId":"417","endLine":67,"endColumn":30,"suggestions":"440"},{"ruleId":"414","severity":1,"message":"415","line":86,"column":7,"nodeType":"416","messageId":"417","endLine":86,"endColumn":30,"suggestions":"441"},{"ruleId":"442","severity":1,"message":"443","line":92,"column":39,"nodeType":"444","messageId":"445","endLine":92,"endColumn":42,"suggestions":"446"},{"ruleId":"418","severity":1,"message":"447","line":118,"column":12,"nodeType":"420","messageId":"421","endLine":118,"endColumn":36},{"ruleId":"418","severity":1,"message":"448","line":4,"column":57,"nodeType":"420","messageId":"421","endLine":4,"endColumn":76},{"ruleId":"449","severity":1,"message":"450","line":26,"column":8,"nodeType":"451","messageId":"452","endLine":26,"endColumn":42},{"ruleId":"449","severity":1,"message":"450","line":133,"column":8,"nodeType":"451","messageId":"452","endLine":133,"endColumn":29},"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","@typescript-eslint/no-unused-vars","'params' is defined but never used.","Identifier","unusedVar","@typescript-eslint/ban-types","Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","bannedTypeMessage","prefer-const","'x' is never reassigned. Use 'const' instead.","useConst",{"range":"453","text":"454"},"'y' is never reassigned. Use 'const' instead.",{"range":"455","text":"454"},"prettier/prettier","Delete `⏎⏎`",{"range":"456","text":"457"},"'backgroundColorId' is defined but never used.","'line' is defined but never used.","'pointEquals' is defined but never used.","'blobToCanvas' is defined but never used.","'colorIndex' is assigned a value but never used.","'state' is defined but never used.",["458"],["459"],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["460","461"],"'index' is defined but never used.","'canvasToWebGLCoordY' is defined but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType",[1117,1120],"const",[1154,1157],[0,2],"",{"messageId":"462","fix":"463","desc":"464"},{"messageId":"462","fix":"465","desc":"464"},{"messageId":"466","fix":"467","desc":"468"},{"messageId":"469","fix":"470","desc":"471"},"suggestOptionalChain",{"range":"472","text":"473"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"474","text":"473"},"suggestUnknown",{"range":"475","text":"476"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"475","text":"477"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[2266,2267],"?.",[2905,2906],[3086,3089],"unknown","never"]