[{"/Users/jani/Code/Web/dxpaint/src/index.tsx":"1","/Users/jani/Code/Web/dxpaint/src/components/App.tsx":"2","/Users/jani/Code/Web/dxpaint/src/components/canvas/ZoomCanvas.tsx":"3","/Users/jani/Code/Web/dxpaint/src/components/canvas/CanvasSyncHandler.tsx":"4","/Users/jani/Code/Web/dxpaint/src/components/toolbox/BuiltInBrushes.tsx":"5","/Users/jani/Code/Web/dxpaint/src/components/palette/ColorIndicator.tsx":"6","/Users/jani/Code/Web/dxpaint/src/overmind/canvas/index.ts":"7","/Users/jani/Code/Web/dxpaint/src/overmind/app/index.ts":"8","/Users/jani/Code/Web/dxpaint/src/overmind/tool/index.ts":"9","/Users/jani/Code/Web/dxpaint/src/brush/BrushHistory.ts":"10","/Users/jani/Code/Web/dxpaint/src/components/canvas/Canvas.tsx":"11","/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItemOpen.tsx":"12","/Users/jani/Code/Web/dxpaint/src/brush/CustomBrush.tsx":"13","/Users/jani/Code/Web/dxpaint/src/overmind/dialog/state.ts":"14","/Users/jani/Code/Web/dxpaint/src/overmind/dialog/actions.ts":"15","/Users/jani/Code/Web/dxpaint/src/overmind/palette/actions.ts":"16","/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/actions.ts":"17","/Users/jani/Code/Web/dxpaint/src/overmind/tool/state.ts":"18","/Users/jani/Code/Web/dxpaint/src/overmind/brush/state.ts":"19","/Users/jani/Code/Web/dxpaint/src/colorIndex/renderer/RendererContext.ts":"20","/Users/jani/Code/Web/dxpaint/src/colorIndex/indexer/FillRectIndexer.ts":"21","/Users/jani/Code/Web/dxpaint/src/algorithm/shape.ts":"22","/Users/jani/Code/Web/dxpaint/src/tools/FreehandTool.tsx":"23","/Users/jani/Code/Web/dxpaint/src/components/palette/util.tsx":"24","/Users/jani/Code/Web/dxpaint/src/tools/EllipseTool.tsx":"25","/Users/jani/Code/Web/dxpaint/src/tools/AirbrushTool.tsx":"26","/Users/jani/Code/Web/dxpaint/src/brush/BuiltInBrushFactory.tsx":"27","/Users/jani/Code/Web/dxpaint/src/tools/util/Throttle.tsx":"28","/Users/jani/Code/Web/dxpaint/src/overmind/index.ts":"29","/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItemSave.tsx":"30","/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxDualToggleButton.tsx":"31","/Users/jani/Code/Web/dxpaint/src/tools/util/Debounce.tsx":"32","/Users/jani/Code/Web/dxpaint/src/overmind/canvas/state.ts":"33","/Users/jani/Code/Web/dxpaint/src/overmind/undo/state.ts":"34","/Users/jani/Code/Web/dxpaint/src/overmind/palette/state.ts":"35","/Users/jani/Code/Web/dxpaint/src/overmind/tool/actions.ts":"36","/Users/jani/Code/Web/dxpaint/src/colorIndex/indexer/IndexerContext.ts":"37","/Users/jani/Code/Web/dxpaint/src/brush/PixelBrush.tsx":"38","/Users/jani/Code/Web/dxpaint/src/tools/LineTool.tsx":"39","/Users/jani/Code/Web/dxpaint/src/tools/ZoomInitialPointSelectorTool.tsx":"40","/Users/jani/Code/Web/dxpaint/src/tools/CurveTool.tsx":"41","/Users/jani/Code/Web/dxpaint/src/tools/PolygonTool.tsx":"42","/Users/jani/Code/Web/dxpaint/src/components/dialog/Dialog.tsx":"43","/Users/jani/Code/Web/dxpaint/src/components/canvas/MainCanvas.tsx":"44","/Users/jani/Code/Web/dxpaint/src/components/canvas/CanvasState.tsx":"45","/Users/jani/Code/Web/dxpaint/src/components/canvas/hooks.tsx":"46","/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxToggleButton.tsx":"47","/Users/jani/Code/Web/dxpaint/src/components/paletteEditor/PaletteEditor.tsx":"48","/Users/jani/Code/Web/dxpaint/src/components/GlobalHotkeyManager.tsx":"49","/Users/jani/Code/Web/dxpaint/src/components/toolbox/Toolbox.tsx":"50","/Users/jani/Code/Web/dxpaint/src/components/dialog/DialogManager.tsx":"51","/Users/jani/Code/Web/dxpaint/src/overmind/palette/index.ts":"52","/Users/jani/Code/Web/dxpaint/src/overmind/brush/index.ts":"53","/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/index.ts":"54","/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItem.tsx":"55","/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxActionButton.tsx":"56","/Users/jani/Code/Web/dxpaint/src/overmind/app/actions.ts":"57","/Users/jani/Code/Web/dxpaint/src/overmind/brush/actions.ts":"58","/Users/jani/Code/Web/dxpaint/src/colorIndex/renderer/ColorIndexRenderer.ts":"59","/Users/jani/Code/Web/dxpaint/src/tools/BrushSelector.tsx":"60","/Users/jani/Code/Web/dxpaint/src/tools/CircleTool.tsx":"61","/Users/jani/Code/Web/dxpaint/src/tools/ColorSelectorTool.tsx":"62","/Users/jani/Code/Web/dxpaint/src/tools/util/SelectionIndicator.tsx":"63","/Users/jani/Code/Web/dxpaint/src/overmind/dialog/index.ts":"64","/Users/jani/Code/Web/dxpaint/src/overmind/canvas/actions.ts":"65","/Users/jani/Code/Web/dxpaint/src/tools/RectangleTool.tsx":"66","/Users/jani/Code/Web/dxpaint/src/tools/TextTool.tsx":"67","/Users/jani/Code/Web/dxpaint/src/overmind/undo/index.ts":"68","/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/state.ts":"69","/Users/jani/Code/Web/dxpaint/src/tools/DottedFreehandTool.tsx":"70","/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/actions.ts":"71","/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/state.ts":"72","/Users/jani/Code/Web/dxpaint/src/components/palette/ColorButton.tsx":"73","/Users/jani/Code/Web/dxpaint/src/components/palette/Palette.tsx":"74","/Users/jani/Code/Web/dxpaint/src/colorIndex/indexer/DrawImageIndexer.ts":"75","/Users/jani/Code/Web/dxpaint/src/colorIndex/ColorIndexer.ts":"76","/Users/jani/Code/Web/dxpaint/src/algorithm/primitive.ts":"77","/Users/jani/Code/Web/dxpaint/src/colorIndex/util.ts":"78"},{"size":758,"mtime":1581006660054,"results":"79","hashOfConfig":"80"},{"size":1647,"mtime":1610123744119,"results":"81","hashOfConfig":"80"},{"size":2303,"mtime":1587397395180,"results":"82","hashOfConfig":"80"},{"size":1650,"mtime":1587397383935,"results":"83","hashOfConfig":"80"},{"size":4292,"mtime":1588883165180,"results":"84","hashOfConfig":"80"},{"size":1341,"mtime":1609964713351,"results":"85","hashOfConfig":"80"},{"size":99,"mtime":1570358386366,"results":"86","hashOfConfig":"80"},{"size":99,"mtime":1589653071467,"results":"87","hashOfConfig":"80"},{"size":99,"mtime":1581162181250,"results":"88","hashOfConfig":"80"},{"size":371,"mtime":1598417463850,"results":"89","hashOfConfig":"80"},{"size":4286,"mtime":1596966551506,"results":"90","hashOfConfig":"80"},{"size":712,"mtime":1586637521430,"results":"91","hashOfConfig":"80"},{"size":6649,"mtime":1600503071164,"results":"92","hashOfConfig":"80"},{"size":103,"mtime":1589645340777,"results":"93","hashOfConfig":"80"},{"size":238,"mtime":1589698799652,"results":"94","hashOfConfig":"80"},{"size":994,"mtime":1610288900130,"results":"95","hashOfConfig":"80"},{"size":2307,"mtime":1587665133808,"results":"96","hashOfConfig":"80"},{"size":3939,"mtime":1606591580738,"results":"97","hashOfConfig":"80"},{"size":775,"mtime":1598628605933,"results":"98","hashOfConfig":"80"},{"size":561,"mtime":1599394513632,"results":"99","hashOfConfig":"80"},{"size":4441,"mtime":1598164827369,"results":"100","hashOfConfig":"80"},{"size":11654,"mtime":1597776280193,"results":"101","hashOfConfig":"80"},{"size":3455,"mtime":1598418091996,"results":"102","hashOfConfig":"80"},{"size":2427,"mtime":1598195635333,"results":"103","hashOfConfig":"80"},{"size":5449,"mtime":1598418063310,"results":"104","hashOfConfig":"80"},{"size":3269,"mtime":1598417920855,"results":"105","hashOfConfig":"80"},{"size":3122,"mtime":1598374399045,"results":"106","hashOfConfig":"80"},{"size":749,"mtime":1606592951751,"results":"107","hashOfConfig":"80"},{"size":1069,"mtime":1609948473281,"results":"108","hashOfConfig":"80"},{"size":419,"mtime":1586636737515,"results":"109","hashOfConfig":"80"},{"size":1288,"mtime":1582737326774,"results":"110","hashOfConfig":"80"},{"size":448,"mtime":1606592971846,"results":"111","hashOfConfig":"80"},{"size":990,"mtime":1606591610390,"results":"112","hashOfConfig":"80"},{"size":742,"mtime":1606591809198,"results":"113","hashOfConfig":"80"},{"size":787,"mtime":1610395467992,"results":"114","hashOfConfig":"80"},{"size":3492,"mtime":1598088214899,"results":"115","hashOfConfig":"80"},{"size":1898,"mtime":1599375764261,"results":"116","hashOfConfig":"80"},{"size":2635,"mtime":1597779378127,"results":"117","hashOfConfig":"80"},{"size":2695,"mtime":1610288995772,"results":"118","hashOfConfig":"80"},{"size":1686,"mtime":1596966551515,"results":"119","hashOfConfig":"80"},{"size":3062,"mtime":1598418004456,"results":"120","hashOfConfig":"80"},{"size":4424,"mtime":1598418176200,"results":"121","hashOfConfig":"80"},{"size":620,"mtime":1609948514564,"results":"122","hashOfConfig":"80"},{"size":1452,"mtime":1598455187896,"results":"123","hashOfConfig":"80"},{"size":1328,"mtime":1576359001814,"results":"124","hashOfConfig":"80"},{"size":2812,"mtime":1609945925836,"results":"125","hashOfConfig":"80"},{"size":849,"mtime":1582737330219,"results":"126","hashOfConfig":"80"},{"size":2009,"mtime":1610176734529,"results":"127","hashOfConfig":"80"},{"size":794,"mtime":1589698776952,"results":"128","hashOfConfig":"80"},{"size":5313,"mtime":1599406320902,"results":"129","hashOfConfig":"80"},{"size":1298,"mtime":1589699509988,"results":"130","hashOfConfig":"80"},{"size":99,"mtime":1570358390587,"results":"131","hashOfConfig":"80"},{"size":99,"mtime":1570358382606,"results":"132","hashOfConfig":"80"},{"size":99,"mtime":1570358454848,"results":"133","hashOfConfig":"80"},{"size":479,"mtime":1586285629987,"results":"134","hashOfConfig":"80"},{"size":691,"mtime":1582737314794,"results":"135","hashOfConfig":"80"},{"size":197,"mtime":1589653419630,"results":"136","hashOfConfig":"80"},{"size":1520,"mtime":1598417624264,"results":"137","hashOfConfig":"80"},{"size":5171,"mtime":1610035726439,"results":"138","hashOfConfig":"80"},{"size":2633,"mtime":1596966551507,"results":"139","hashOfConfig":"80"},{"size":3737,"mtime":1598417952306,"results":"140","hashOfConfig":"80"},{"size":1157,"mtime":1610288854797,"results":"141","hashOfConfig":"80"},{"size":2017,"mtime":1597691407920,"results":"142","hashOfConfig":"80"},{"size":99,"mtime":1589645298846,"results":"143","hashOfConfig":"80"},{"size":1440,"mtime":1598629750358,"results":"144","hashOfConfig":"80"},{"size":3623,"mtime":1598418204617,"results":"145","hashOfConfig":"80"},{"size":3797,"mtime":1596966551513,"results":"146","hashOfConfig":"80"},{"size":99,"mtime":1570358463891,"results":"147","hashOfConfig":"80"},{"size":3476,"mtime":1606591793814,"results":"148","hashOfConfig":"80"},{"size":2892,"mtime":1598418027518,"results":"149","hashOfConfig":"80"},{"size":221,"mtime":1609964687396,"results":"150","hashOfConfig":"80"},{"size":94,"mtime":1609948309696,"results":"151","hashOfConfig":"80"},{"size":1140,"mtime":1610122119190,"results":"152","hashOfConfig":"80"},{"size":2782,"mtime":1610122387748,"results":"153","hashOfConfig":"80"},{"size":6009,"mtime":1610122740164,"results":"154","hashOfConfig":"80"},{"size":5493,"mtime":1610289520941,"results":"155","hashOfConfig":"80"},{"size":3077,"mtime":1610289328149,"results":"156","hashOfConfig":"80"},{"size":1186,"mtime":1610289583940,"results":"157","hashOfConfig":"80"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},"1plr3f1",{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"160"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"204","messages":"205","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":4,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"160"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"215","messages":"216","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"201"},{"filePath":"218","messages":"219","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"160"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"227","messages":"228","errorCount":2,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":null},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"176"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"201"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jani/Code/Web/dxpaint/src/index.tsx",[],[],"/Users/jani/Code/Web/dxpaint/src/components/App.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/ZoomCanvas.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/CanvasSyncHandler.tsx",[],[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/BuiltInBrushes.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/palette/ColorIndicator.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/canvas/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/app/index.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/tool/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/brush/BrushHistory.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/Canvas.tsx",["325","326"],"import React, { useEffect, useRef } from 'react';\nimport { CanvasStateAction } from './CanvasState';\nimport { useInitTool, useUndo, useFillStyle } from './hooks';\nimport { useOvermind } from '../../overmind';\nimport { getEventHandler, getEventHandlerOverlay } from '../../tools/util/util';\nimport { EventHandlerParams, EventHandlerParamsOverlay } from '../../tools/Tool';\nimport './Canvas.css';\n\ninterface Props {\n  canvasDispatch: React.Dispatch<CanvasStateAction>;\n  isZoomCanvas: boolean;\n  zoomFactor?: number;\n}\n\nexport function Canvas({\n  canvasDispatch,\n  isZoomCanvas,\n  zoomFactor = 1,\n}: Props): JSX.Element | null {\n  console.log('render ' + (isZoomCanvas ? 'ZoomCanvas' : 'MainCanvas'));\n  const canvasRef = useRef<HTMLCanvasElement>(document.createElement('canvas'));\n  const overlayCanvasRef = useRef<HTMLCanvasElement>(document.createElement('canvas'));\n\n  useEffect((): void => {\n    canvasDispatch({\n      type: isZoomCanvas ? 'setZoomCanvas' : 'setMainCanvas',\n      elements: { canvas: canvasRef.current, overlay: overlayCanvasRef.current },\n    });\n  }, []);\n\n  const canvasCtx = canvasRef.current.getContext('2d', {\n    alpha: false,\n    desynchronized: false, // desynchronized caused various problems with Windows version of Chrome\n  }) as CanvasRenderingContext2D | null;\n  const overlayCanvasCtx = overlayCanvasRef.current.getContext('2d', {\n    alpha: true,\n    desynchronized: false, // desynchronized caused various problems with Windows version of Chrome\n  }) as CanvasRenderingContext2D | null;\n\n  const { state, actions } = useOvermind();\n\n  const eventHandlerParams: EventHandlerParams = {\n    ctx: canvasCtx!,\n    onPaint: (): void => {\n      actions.canvas.setCanvasModified(isZoomCanvas);\n    },\n    undoPoint: (): void => {\n      actions.undo.setUndoPoint(canvasRef.current);\n    },\n  };\n  const eventHandlerParamsOverlay: EventHandlerParamsOverlay = {\n    ctx: overlayCanvasCtx!,\n    onPaint: (): void => {\n      actions.canvas.setOverlayCanvasModified(isZoomCanvas);\n    },\n  };\n\n  useUndo(canvasRef.current);\n  useInitTool(eventHandlerParams, eventHandlerParamsOverlay, isZoomCanvas);\n\n  useFillStyle(canvasCtx);\n  useFillStyle(overlayCanvasCtx);\n\n  if (!canvasCtx || !overlayCanvasCtx) {\n    return null; // no render\n  }\n\n  const tool = state.toolbox.activeTool;\n\n  const CSSZoom = {\n    width: state.canvas.resolution.width * zoomFactor,\n    height: state.canvas.resolution.height * zoomFactor,\n  };\n\n  return (\n    <>\n      <canvas\n        className=\"canvas\"\n        ref={canvasRef}\n        width={state.canvas.resolution.width}\n        height={state.canvas.resolution.height}\n        style={CSSZoom}\n        onClick={(event): void => {\n          getEventHandler(tool, 'onClick', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onClickOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onMouseDown={(event): void => {\n          getEventHandler(tool, 'onMouseDown', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onMouseDownOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onMouseUp={(event): void => {\n          getEventHandler(tool, 'onMouseUp', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onMouseUpOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onMouseEnter={(event): void => {\n          getEventHandler(tool, 'onMouseEnter', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onMouseEnterOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onMouseLeave={(event): void => {\n          getEventHandler(tool, 'onMouseLeave', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onMouseLeaveOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onMouseMove={(event): void => {\n          getEventHandler(tool, 'onMouseMove', eventHandlerParams)(event);\n          getEventHandlerOverlay(tool, 'onMouseMoveOverlay', eventHandlerParamsOverlay)(event);\n        }}\n        onContextMenu={getEventHandler(tool, 'onContextMenu', eventHandlerParams)}\n      />\n      <canvas\n        className=\"canvas canvas--overlay\"\n        ref={overlayCanvasRef}\n        width={state.canvas.resolution.width}\n        height={state.canvas.resolution.height}\n        style={CSSZoom}\n      />\n    </>\n  );\n}\n","/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItemOpen.tsx",[],"/Users/jani/Code/Web/dxpaint/src/brush/CustomBrush.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/dialog/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/dialog/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/palette/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/tool/state.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/overmind/brush/state.ts",[],[],"/Users/jani/Code/Web/dxpaint/src/colorIndex/renderer/RendererContext.ts",[],"/Users/jani/Code/Web/dxpaint/src/colorIndex/indexer/FillRectIndexer.ts",["327"],"/Users/jani/Code/Web/dxpaint/src/algorithm/shape.ts",["328","329","330","331"],"// Algorithms for composing shapes using primitives\n\nimport { Point } from '../types';\nimport { Brush } from '../brush/Brush';\nimport { fillRect } from './primitive';\n\nexport function line(ctx: CanvasRenderingContext2D, brush: Brush, start: Point, end: Point): void {\n  const dist = Math.round(distance(start, end));\n  if (dist === 0) {\n    // just draw a dot\n    brush.drawDot(ctx, start);\n    return;\n  }\n\n  const cx = (end.x - start.x) / dist;\n  const cy = (end.y - start.y) / dist;\n\n  for (let i = 0; i <= dist; i++) {\n    brush.drawDot(ctx, {\n      x: start.x + cx * i,\n      y: start.y + cy * i,\n    });\n  }\n}\n\nexport function distance(start: Point, end: Point): number {\n  return Math.sqrt((end.x - start.x) * (end.x - start.x) + (end.y - start.y) * (end.y - start.y));\n}\n\n// Quadratic bezier curve with one control point.\n// DPaint used conic curves instead.\nexport function curve(\n  ctx: CanvasRenderingContext2D,\n  brush: Brush,\n  start: Point,\n  end: Point,\n  middlePoint: Point\n): void {\n  // calculate control point for the bezier curve when middlepoint given\n  const controlPoint: Point = {\n    x: 2 * middlePoint.x - 0.5 * start.x - 0.5 * end.x,\n    y: 2 * middlePoint.y - 0.5 * start.y - 0.5 * end.y,\n  };\n\n  let i: number;\n  let previous: Point = start;\n  // TODO: get rid of the magic number\n  for (i = 0; i <= 1; i = i + 0.02) {\n    const current = getQuadraticXY(i, start, controlPoint, end);\n    line(ctx, brush, previous, current);\n    previous = current;\n  }\n  line(ctx, brush, previous, end);\n}\n\nfunction getQuadraticXY(t: number, start: Point, controlPoint: Point, end: Point): Point {\n  return {\n    x: Math.round((1 - t) * (1 - t) * start.x + 2 * (1 - t) * t * controlPoint.x + t * t * end.x),\n    y: Math.round((1 - t) * (1 - t) * start.y + 2 * (1 - t) * t * controlPoint.y + t * t * end.y),\n  };\n}\n\nexport function unfilledRect(\n  ctx: CanvasRenderingContext2D,\n  brush: Brush,\n  start: Point,\n  end: Point\n): void {\n  if (start === end) {\n    // just draw a dot\n    brush.drawDot(ctx, start);\n    return;\n  }\n\n  // rectangle limits\n\n  const y1 = start.y;\n  const y2 = end.y;\n  const x1 = start.x;\n  const x2 = end.x;\n\n  // draw lines\n\n  brush.drawLineHorizontal(ctx, x1, x2, y1);\n  brush.drawLineHorizontal(ctx, x1, x2, y2);\n  brush.drawLineVertical(ctx, y1, y2, x1);\n  brush.drawLineVertical(ctx, y1, y2, x2);\n}\n\nexport function filledRect(\n  ctx: CanvasRenderingContext2D,\n  brush: Brush,\n  start: Point,\n  end: Point\n): void {\n  if (start === end) {\n    // just draw a dot\n    fillRect(start.x, start.y, 1, 1, ctx);\n    return;\n  }\n\n  const width = end.x - start.x;\n  const height = end.y - start.y;\n  fillRect(start.x, start.y, width, height, ctx);\n}\n\n// adapted from https://stackoverflow.com/questions/45743774/fastest-way-to-draw-and-fill-a-not-anti-aliasing-circle-in-html5canvas\nexport function filledCircle(\n  ctx: CanvasRenderingContext2D,\n  brush: Brush,\n  center: Point,\n  r: number\n): void {\n  if (r === 0) {\n    // just draw a dot\n    fillRect(center.x, center.y, 1, 1, ctx);\n    return;\n  }\n\n  let x = r;\n  let y = 0;\n  let cd = 0;\n\n  // middle line\n  fillRect(center.x - x, center.y, r << 1, 1, ctx);\n\n  while (x > y) {\n    cd -= --x - ++y;\n    if (cd < 0) cd += x++;\n    fillRect(center.x - y, center.y - x, y << 1, 1, ctx); // upper 1/4\n    fillRect(center.x - x, center.y - y, x << 1, 1, ctx); // upper 2/4\n    fillRect(center.x - x, center.y + y, x << 1, 1, ctx); // lower 3/4\n    fillRect(center.x - y, center.y + x, y << 1, 1, ctx); // lower 4/4\n  }\n}\n\n// adapted from https://stackoverflow.com/questions/45743774/fastest-way-to-draw-and-fill-a-not-anti-aliasing-circle-in-html5canvas\nexport function unfilledCircle(\n  ctx: CanvasRenderingContext2D,\n  brush: Brush,\n  center: Point,\n  r: number\n): void {\n  if (r === 0) {\n    // just draw a dot\n    brush.drawDot(ctx, center);\n    return;\n  }\n\n  let x = r,\n    y = 0,\n    cd = 0;\n\n  // middle points\n  brush.drawDot(ctx, { x: center.x - x, y: center.y });\n  brush.drawDot(ctx, { x: center.x + x, y: center.y });\n  brush.drawDot(ctx, { x: center.x, y: center.y - r });\n  brush.drawDot(ctx, { x: center.x, y: center.y + r });\n\n  // octants\n  while (x > y) {\n    cd -= --x - ++y;\n    if (cd < 0) cd += x++;\n    brush.drawDot(ctx, { x: center.x - y, y: center.y - x });\n    brush.drawDot(ctx, { x: center.x - x, y: center.y - y });\n    brush.drawDot(ctx, { x: center.x - x, y: center.y + y });\n    brush.drawDot(ctx, { x: center.x - y, y: center.y + x });\n\n    brush.drawDot(ctx, { x: center.x + y, y: center.y + x });\n    brush.drawDot(ctx, { x: center.x + x, y: center.y + y });\n    brush.drawDot(ctx, { x: center.x + x, y: center.y - y });\n    brush.drawDot(ctx, { x: center.x + y, y: center.y - x });\n  }\n}\n\nexport function unfilledEllipse(\n  ctx: CanvasRenderingContext2D,\n  brush: Brush,\n  center: Point,\n  radiusX: number,\n  radiusY: number,\n  rotationAngle: number\n): void {\n  // https://www.wolframalpha.com/input/?i=%28%28x*cos%28k%29+%2B+y*sin%28k%29%29%5E2%29%2Fa%5E2+%2B+%28%28x*sin%28k%29+-+y*cos%28k%29%29%5E2%29%2Fb%5E2+%3D+1\n  const a = radiusX;\n  const b = radiusY;\n  const phi = rotationAngle * (Math.PI / 180);\n\n  const xStart = Math.ceil(-Math.sqrt(a ** 2 * Math.cos(phi) ** 2 + b ** 2 * Math.sin(phi) ** 2));\n  const xEnd = -xStart;\n  if (xEnd === xStart) {\n    return;\n  }\n\n  // Define some constants for calculation\n\n  const a2 = a ** 2;\n  const b2 = b ** 2;\n  const ab = a * b;\n  const k = 2 * (Math.sin(phi) ** 2 / a2 + Math.cos(phi) ** 2 / b2);\n  const sinphicosphi = Math.sin(phi) * Math.cos(phi);\n  const cos2phi = Math.cos(2 * phi);\n  const c = a2 * cos2phi + a2 - b2 * cos2phi + b2;\n  const sqrt2 = Math.sqrt(2);\n\n  // Calculate y points of ellipse given x points\n\n  const ellipsePointsLowerHalf: Point[] = [];\n  const ellipsePointsUpperHalf: Point[] = [];\n  for (let x = xStart; x <= xEnd; x++) {\n    const nominator = sqrt2 * Math.sqrt(c - 2 * x ** 2);\n    let y1 = nominator / ab - (2 * x * sinphicosphi) / a2 + (2 * x * sinphicosphi) / b2;\n    y1 = Math.round(y1 / k);\n    let y2 = -nominator / ab - (2 * x * sinphicosphi) / a2 + (2 * x * sinphicosphi) / b2;\n    y2 = Math.round(y2 / k);\n    ellipsePointsLowerHalf.push({ x: x + center.x, y: y1 + center.y });\n    ellipsePointsUpperHalf.push({ x: x + center.x, y: y2 + center.y });\n  }\n\n  // Draw ellipse\n\n  // Lower half\n\n  for (let i = 1; i < ellipsePointsLowerHalf.length - 1; i++) {\n    const point = ellipsePointsLowerHalf[i];\n    const previousPoint = ellipsePointsLowerHalf[i - 1];\n    const nextPoint = ellipsePointsLowerHalf[i + 1];\n    if (point.y > previousPoint.y + 1) {\n      brush.drawLineVertical(ctx, previousPoint.y + 1, point.y, point.x);\n    } else if (point.y > nextPoint.y + 1) {\n      brush.drawLineVertical(ctx, nextPoint.y + 1, point.y, point.x);\n    } else {\n      brush.drawDot(ctx, point);\n    }\n  }\n\n  // Upper half\n\n  for (let i = 1; i < ellipsePointsUpperHalf.length - 1; i++) {\n    const point = ellipsePointsUpperHalf[i];\n    const previousPoint = ellipsePointsUpperHalf[i - 1];\n    const nextPoint = ellipsePointsUpperHalf[i + 1];\n    if (point.y < previousPoint.y - 1) {\n      brush.drawLineVertical(ctx, point.y, previousPoint.y - 1, point.x);\n    } else if (point.y < nextPoint.y - 1) {\n      brush.drawLineVertical(ctx, point.y, nextPoint.y - 1, point.x);\n    } else {\n      brush.drawDot(ctx, point);\n    }\n  }\n\n  // Close both ends of ellipse by drawing a vertical line at x = 0 and x = length - 1\n\n  const startYLower = ellipsePointsLowerHalf[0].y;\n  const startYUpper = ellipsePointsUpperHalf[0].y;\n  const startX = ellipsePointsUpperHalf[0].x;\n  brush.drawLineVertical(ctx, startYLower, startYUpper - 1, startX);\n  brush.drawDot(ctx, ellipsePointsLowerHalf[0]);\n\n  const endYLower = ellipsePointsLowerHalf[ellipsePointsUpperHalf.length - 1].y;\n  const endYUpper = ellipsePointsUpperHalf[ellipsePointsUpperHalf.length - 1].y;\n  const endX = ellipsePointsUpperHalf[ellipsePointsUpperHalf.length - 1].x;\n  brush.drawLineVertical(ctx, endYLower, endYUpper - 1, endX);\n  brush.drawDot(ctx, ellipsePointsLowerHalf[ellipsePointsUpperHalf.length - 1]);\n}\n\nexport function filledEllipse(\n  ctx: CanvasRenderingContext2D,\n  brush: Brush,\n  center: Point,\n  radiusX: number,\n  radiusY: number,\n  rotationAngle: number\n): void {\n  // https://www.wolframalpha.com/input/?i=%28%28x*cos%28k%29+%2B+y*sin%28k%29%29%5E2%29%2Fa%5E2+%2B+%28%28x*sin%28k%29+-+y*cos%28k%29%29%5E2%29%2Fb%5E2+%3D+1\n  const a = radiusX;\n  const b = radiusY;\n  const phi = rotationAngle * (Math.PI / 180);\n\n  const xStart = Math.ceil(-Math.sqrt(a ** 2 * Math.cos(phi) ** 2 + b ** 2 * Math.sin(phi) ** 2));\n  const xEnd = -xStart;\n\n  // Define some constants for calculation\n\n  const a2 = a ** 2;\n  const b2 = b ** 2;\n  const ab = a * b;\n  const k = 2 * (Math.sin(phi) ** 2 / a2 + Math.cos(phi) ** 2 / b2);\n  const sinphicosphi = Math.sin(phi) * Math.cos(phi);\n  const cos2phi = Math.cos(2 * phi);\n  const c = a2 * cos2phi + a2 - b2 * cos2phi + b2;\n  const sqrt2 = Math.sqrt(2);\n\n  for (let x = xStart; x <= xEnd; x++) {\n    const nominator = sqrt2 * Math.sqrt(c - 2 * x ** 2);\n    let y1 = nominator / ab - (2 * x * sinphicosphi) / a2 + (2 * x * sinphicosphi) / b2;\n    y1 = Math.round(y1 / k);\n    let y2 = -nominator / ab - (2 * x * sinphicosphi) / a2 + (2 * x * sinphicosphi) / b2;\n    y2 = Math.round(y2 / k);\n    const h = Math.abs(y1 - y2);\n\n    fillRect(x + center.x, y1 + center.y, 1, -h, ctx);\n  }\n}\n\nexport function unfilledPolygon(\n  ctx: CanvasRenderingContext2D,\n  brush: Brush,\n  vertices: Point[],\n  complete = true\n): void {\n  for (let i = 1; i < vertices.length; i++) {\n    brush.drawLine(ctx, vertices[i - 1], vertices[i]);\n  }\n  if (complete) {\n    brush.drawLine(ctx, vertices[vertices.length - 1], vertices[0]);\n  }\n}\n\n// adapted from https://alienryderflex.com/polygon_fill/\n// TODO: must also draw the outline of the polygon\nexport function filledPolygon(\n  ctx: CanvasRenderingContext2D,\n  brush: Brush,\n  vertices: Point[]\n): void {\n  // first draw the outline\n  //unfilledPolygon(ctx, new PixelBrush(), vertices);\n\n  const imageTop = Math.min(...vertices.map((point): number => point.y));\n  const imageBottom = Math.max(...vertices.map((point): number => point.y));\n  const imageLeft = Math.min(...vertices.map((point): number => point.x));\n  const imageRight = Math.max(...vertices.map((point): number => point.x));\n\n  const nodeX: number[] = [];\n\n  //  Loop through the rows of the image.\n  for (let pixelY = imageTop; pixelY < imageBottom; pixelY++) {\n    //  Build a list of nodes.\n    let nodes = 0;\n    const polyCorners = vertices.length;\n    let j = polyCorners - 1;\n    for (let i = 0; i < polyCorners; i++) {\n      if (\n        (vertices[i].y < pixelY && vertices[j].y >= pixelY) ||\n        (vertices[j].y < pixelY && vertices[i].y >= pixelY)\n      ) {\n        nodeX[nodes++] = Math.round(\n          vertices[i].x +\n            ((pixelY - vertices[i].y) / (vertices[j].y - vertices[i].y)) *\n              (vertices[j].x - vertices[i].x)\n        );\n      }\n      j = i;\n    }\n\n    //  Sort the nodes, via a simple Bubble sort.\n    let i = 0;\n    while (i < nodes - 1) {\n      if (nodeX[i] > nodeX[i + 1]) {\n        const swap = nodeX[i];\n        nodeX[i] = nodeX[i + 1];\n        nodeX[i + 1] = swap;\n        if (i) i--;\n      } else {\n        i++;\n      }\n    }\n\n    //  Fill the pixels between node pairs.\n    for (i = 0; i < nodes; i += 2) {\n      if (nodeX[i] >= imageRight) break;\n      if (nodeX[i + 1] > imageLeft) {\n        if (nodeX[i] < imageLeft) nodeX[i] = imageLeft;\n        if (nodeX[i + 1] > imageRight) nodeX[i + 1] = imageRight;\n        fillRect(nodeX[i], pixelY, nodeX[i + 1] - nodeX[i], 1, ctx);\n      }\n    }\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/tools/FreehandTool.tsx",["332"],"/Users/jani/Code/Web/dxpaint/src/components/palette/util.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/EllipseTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/AirbrushTool.tsx",["333","334"],"import {\n  Tool,\n  EventHandlerParamsWithEvent,\n  OverlayEventHandlerParamsWithEvent,\n  EventHandlerParams,\n} from './Tool';\nimport {\n  getMousePos,\n  clearOverlayCanvas,\n  isRightMouseButton,\n  isLeftOrRightMouseButton,\n  omit,\n} from './util/util';\nimport { overmind } from '../index';\nimport { brushHistory } from '../brush/BrushHistory';\n\nexport class AirbrushTool implements Tool {\n  private timeout = 0;\n\n  private prepareToPaint(withBGColor: boolean): void {\n    if (withBGColor) {\n      overmind.actions.tool.activeToolToBGFillStyle();\n      overmind.actions.brush.toBGBrush();\n    }\n  }\n\n  public onInit(params: EventHandlerParams): void {\n    overmind.actions.tool.activeToolToFGFillStyle();\n    overmind.actions.brush.toFGBrush();\n  }\n\n  public onContextMenu(params: EventHandlerParamsWithEvent): void {\n    const { event } = params;\n    event.preventDefault();\n  }\n\n  public onMouseMove(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx: { canvas },\n    } = params;\n\n    const mousePos = getMousePos(canvas, event);\n    overmind.actions.tool.airbrushToolPosition(mousePos);\n  }\n\n  public onMouseDown(params: EventHandlerParamsWithEvent): void {\n    const { event, ctx, onPaint } = params;\n\n    const draw = (ctx: CanvasRenderingContext2D, onPaint: Function): void => {\n      for (let i = 50; i--; ) {\n        const angle = getRandomFloat(0, Math.PI * 2);\n        const radius = getRandomFloat(0, 20);\n        if (overmind.state.tool.airbrushTool.position) {\n          brushHistory.current.drawDot(ctx, {\n            x: overmind.state.tool.airbrushTool.position.x + radius * Math.cos(angle),\n            y: overmind.state.tool.airbrushTool.position.y + radius * Math.sin(angle),\n          });\n        }\n      }\n      onPaint();\n      this.timeout = setTimeout(draw, 20, ctx, onPaint);\n    };\n\n    this.prepareToPaint(isRightMouseButton(event));\n    this.timeout = setTimeout(draw, 20, ctx, onPaint);\n  }\n\n  public onMouseUp(params: EventHandlerParamsWithEvent): void {\n    const { undoPoint } = params;\n    clearTimeout(this.timeout);\n    this.onInit(omit(params, 'event'));\n    undoPoint();\n  }\n\n  public onMouseLeave(params: EventHandlerParamsWithEvent): void {\n    const { event, undoPoint } = params;\n    clearTimeout(this.timeout);\n    this.onInit(omit(params, 'event'));\n    if (isLeftOrRightMouseButton(event)) {\n      undoPoint();\n    }\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    if (event.buttons) {\n      return;\n    }\n    clearOverlayCanvas(canvas);\n\n    const mousePos = getMousePos(canvas, event);\n    brushHistory.current.drawDot(ctx, mousePos);\n    onPaint();\n  }\n\n  public onMouseDownOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n\n  public onMouseLeaveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n}\n\nfunction getRandomFloat(min: number, max: number): number {\n  return Math.random() * (max - min) + min;\n}\n","/Users/jani/Code/Web/dxpaint/src/brush/BuiltInBrushFactory.tsx",["335","336","337"],"import { CustomBrush } from './CustomBrush';\n\n// prettier-ignore\nconst builtInBrushShapes = {\n\n  'dot3x3': ['.@.',\n             '@@@',\n             '.@.',],\n\n  'dot5x5': ['.@@@.',\n             '@@@@@',\n             '@@@@@',\n             '@@@@@',\n             '.@@@.',],\n\n  'dot7x7': ['..@@@..',\n             '.@@@@@.',\n             '@@@@@@@',\n             '@@@@@@@',\n             '@@@@@@@',\n             '.@@@@@.',\n             '..@@@..',],\n\n  'square2x2': ['@@',\n                '@@',],\n\n  'square4x4': ['@@@@',\n                '@@@@',\n                '@@@@',\n                '@@@@',],\n\n  'square6x6': ['@@@@@@',\n                '@@@@@@',\n                '@@@@@@',\n                '@@@@@@',\n                '@@@@@@',\n                '@@@@@@',],\n\n  'square8x8': ['@@@@@@@@',\n                '@@@@@@@@',\n                '@@@@@@@@',\n                '@@@@@@@@',\n                '@@@@@@@@',\n                '@@@@@@@@',\n                '@@@@@@@@',\n                '@@@@@@@@',],\n\n  'dither3x3': ['..@',\n                '@..',\n                '..@',],\n\n  'dither7x6': ['...@...',\n                '.......',\n                '@......',\n                '...@..@',\n                '.......',\n                '...@...',],\n}\n\ntype BuiltInBrushShape = keyof typeof builtInBrushShapes;\n\nexport function createBuiltInBrush(shape: BuiltInBrushShape): CustomBrush {\n  const imageData = createImageDataFor(shape);\n  const canvas = document.createElement('canvas');\n  canvas.height = imageData.height;\n  canvas.width = imageData.width;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    throw new Error('Error retreiving context while creating built-in brush');\n  }\n  ctx.putImageData(imageData, 0, 0);\n  return new CustomBrush(canvas.toDataURL(), createColorInderFor(shape));\n}\n\nfunction createImageDataFor(shape: BuiltInBrushShape): ImageData {\n  const stringBitmap = builtInBrushShapes[shape];\n  const width = stringBitmap[0].length;\n  const height = stringBitmap.length;\n  const imageData = new ImageData(width, height);\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      if (stringBitmap[y].charAt(x) === '@') {\n        imageData.data[(y * width + x) * 4 + 0] = 0;\n        imageData.data[(y * width + x) * 4 + 1] = 0;\n        imageData.data[(y * width + x) * 4 + 2] = 0;\n        imageData.data[(y * width + x) * 4 + 3] = 255;\n      }\n    }\n  }\n  return imageData;\n}\n\nfunction createColorInderFor(shape: BuiltInBrushShape): Uint8Array {\n  const stringBitmap = builtInBrushShapes[shape].reverse(); // flip y as texture y coordinates start from bottom\n  const width = stringBitmap[0].length;\n  const height = stringBitmap.length;\n  const stride = 4;\n  const brushColorIndex = new Uint8Array(width * height * 4).fill(0); // initialize as all zeros (transparent)\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      if (stringBitmap[y].charAt(x) === '@') {\n        // can be any color index value here, as built in brushes are always colorized and don't have an inherent color\n        brushColorIndex[(y * width + x) * stride] = 1;\n      }\n    }\n  }\n  return brushColorIndex;\n}\n","/Users/jani/Code/Web/dxpaint/src/tools/util/Throttle.tsx",["338"],"/Users/jani/Code/Web/dxpaint/src/overmind/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItemSave.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxDualToggleButton.tsx",["339","340"],"/Users/jani/Code/Web/dxpaint/src/tools/util/Debounce.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/canvas/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/undo/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/palette/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/tool/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/colorIndex/indexer/IndexerContext.ts",[],"/Users/jani/Code/Web/dxpaint/src/brush/PixelBrush.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/LineTool.tsx",["341"],"/Users/jani/Code/Web/dxpaint/src/tools/ZoomInitialPointSelectorTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/CurveTool.tsx",["342"],"import {\n  Tool,\n  EventHandlerParamsWithEvent,\n  OverlayEventHandlerParamsWithEvent,\n  EventHandlerParams,\n} from './Tool';\nimport {\n  getMousePos,\n  clearOverlayCanvas,\n  isRightMouseButton,\n  isLeftOrRightMouseButton,\n  omit,\n} from './util/util';\nimport { Throttle } from './util/Throttle';\nimport { overmind } from '../index';\nimport { brushHistory } from '../brush/BrushHistory';\n\nexport class CurveTool implements Tool {\n  private throttle = new Throttle(50);\n\n  private prepareToPaint(withBGColor: boolean): void {\n    if (withBGColor) {\n      overmind.actions.tool.activeToolToBGFillStyle();\n      overmind.actions.brush.toBGBrush();\n    }\n  }\n\n  public onInit(params: EventHandlerParams): void {\n    overmind.actions.tool.curveToolReset();\n    overmind.actions.tool.activeToolToFGFillStyle();\n    overmind.actions.brush.toFGBrush();\n  }\n\n  public onContextMenu(params: EventHandlerParamsWithEvent): void {\n    const { event } = params;\n    event.preventDefault();\n  }\n\n  public onMouseUp(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      undoPoint,\n      onPaint,\n    } = params;\n\n    const startPoint = overmind.state.tool.curveTool.start;\n    if (!startPoint) {\n      return;\n    }\n\n    const mousePos = getMousePos(canvas, event);\n    const endPoint = overmind.state.tool.curveTool.end;\n\n    if (endPoint) {\n      brushHistory.current.drawCurve(ctx, startPoint, endPoint, mousePos);\n      undoPoint();\n      onPaint();\n      this.onInit(omit(params, 'event'));\n    } else {\n      overmind.actions.tool.curveToolEnd(mousePos);\n    }\n  }\n\n  public onMouseDown(params: EventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx: { canvas },\n    } = params;\n\n    if (!overmind.state.tool.curveTool.end) {\n      this.prepareToPaint(isRightMouseButton(event));\n      const mousePos = getMousePos(canvas, event);\n      overmind.actions.tool.curveToolStart(mousePos);\n    }\n  }\n\n  // Overlay\n\n  public onMouseMoveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      event,\n      ctx,\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    const mousePos = getMousePos(canvas, event);\n\n    const startPoint = overmind.state.tool.curveTool.start;\n    if (!startPoint) {\n      clearOverlayCanvas(canvas);\n      brushHistory.current.drawDot(ctx, mousePos);\n      onPaint();\n      return;\n    }\n\n    const endPoint = overmind.state.tool.curveTool.end;\n    if (endPoint) {\n      this.throttle.call((): void => {\n        clearOverlayCanvas(canvas);\n        brushHistory.current.drawCurve(ctx, startPoint, endPoint, mousePos);\n      });\n    } else if (isLeftOrRightMouseButton(event)) {\n      this.throttle.call((): void => {\n        clearOverlayCanvas(canvas);\n        brushHistory.current.drawLine(ctx, startPoint, mousePos);\n      });\n    }\n    onPaint();\n  }\n\n  public onMouseLeaveOverlay(params: OverlayEventHandlerParamsWithEvent): void {\n    const {\n      ctx: { canvas },\n      onPaint,\n    } = params;\n    clearOverlayCanvas(canvas);\n    onPaint();\n  }\n}\n","/Users/jani/Code/Web/dxpaint/src/tools/PolygonTool.tsx",["343"],"/Users/jani/Code/Web/dxpaint/src/components/dialog/Dialog.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/MainCanvas.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/CanvasState.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/canvas/hooks.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxToggleButton.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/paletteEditor/PaletteEditor.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/GlobalHotkeyManager.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/Toolbox.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/dialog/DialogManager.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/palette/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/brush/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/menubar/MenuItem.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/toolbox/buttons/ToolboxActionButton.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/app/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/brush/actions.ts",["344","345"],"import { Action } from 'overmind';\nimport { Brush } from '../../brush/Brush';\nimport { Mode, BuiltInBrushId, builtInBrushes } from './state';\nimport { CustomBrush } from '../../brush/CustomBrush';\nimport { brushHistory } from '../../brush/BrushHistory';\n\nexport const setBrush: Action<Brush> = ({ state }, brush): void => {\n  brushHistory.set(brush);\n};\n\nexport const selectBuiltInBrush: Action<BuiltInBrushId> = (\n  { state, actions },\n  brushNumber\n): void => {\n  state.brush.selectedBuiltInBrushId = brushNumber;\n  actions.brush.setBrush(builtInBrushes[brushNumber]);\n  actions.brush.setMode('Color');\n};\n\nexport const setMode: Action<Mode> = ({ state }, mode): void => {\n  state.brush.mode = mode;\n  const brush = brushHistory.current;\n  if (brush instanceof CustomBrush) {\n    if (mode === 'Color') {\n      brush.setFGColor(state.palette.foregroundColor);\n      brush.setBGColor(state.palette.backgroundColor);\n      brush.toFGColor();\n    } else if (mode === 'Matte') {\n      brush.setBGColor(state.palette.backgroundColor);\n      brush.toMatte();\n    }\n  }\n};\n\nexport const toFGBrush: Action = ({ state }): void => {\n  const brush = brushHistory.current;\n  if (state.brush.mode === 'Color' && brush instanceof CustomBrush) {\n    brush.toFGColor();\n  }\n  if (state.brush.mode === 'Matte' && brush instanceof CustomBrush) {\n    brush.toMatte();\n  }\n};\n\nexport const toBGBrush: Action = ({ state }): void => {\n  const brush = brushHistory.current;\n  if (brush instanceof CustomBrush) {\n    brush.toBGColor();\n  }\n};\n","/Users/jani/Code/Web/dxpaint/src/colorIndex/renderer/ColorIndexRenderer.ts",[],"/Users/jani/Code/Web/dxpaint/src/tools/BrushSelector.tsx",["346"],"/Users/jani/Code/Web/dxpaint/src/tools/CircleTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/ColorSelectorTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/util/SelectionIndicator.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/dialog/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/canvas/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/tools/RectangleTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/tools/TextTool.tsx",[],"/Users/jani/Code/Web/dxpaint/src/overmind/undo/index.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/toolbox/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/tools/DottedFreehandTool.tsx",["347"],"/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/actions.ts",[],"/Users/jani/Code/Web/dxpaint/src/overmind/paletteEditor/state.ts",[],"/Users/jani/Code/Web/dxpaint/src/components/palette/ColorButton.tsx",[],"/Users/jani/Code/Web/dxpaint/src/components/palette/Palette.tsx",[],"/Users/jani/Code/Web/dxpaint/src/colorIndex/indexer/DrawImageIndexer.ts",[],"/Users/jani/Code/Web/dxpaint/src/colorIndex/ColorIndexer.ts",[],"/Users/jani/Code/Web/dxpaint/src/algorithm/primitive.ts",[],"/Users/jani/Code/Web/dxpaint/src/colorIndex/util.ts",[],{"ruleId":"348","severity":1,"message":"349","line":43,"column":10,"nodeType":"350","messageId":"351","endLine":43,"endColumn":20},{"ruleId":"348","severity":1,"message":"349","line":52,"column":10,"nodeType":"350","messageId":"351","endLine":52,"endColumn":27},{"ruleId":"352","message":"353","line":1,"column":1,"endLine":1,"endColumn":50,"severity":2,"nodeType":null},{"ruleId":"354","severity":2,"message":"355","line":107,"column":1,"nodeType":"356","messageId":"357","endLine":107,"endColumn":132},{"ruleId":"354","severity":2,"message":"355","line":137,"column":1,"nodeType":"356","messageId":"357","endLine":137,"endColumn":132},{"ruleId":"354","severity":2,"message":"358","line":184,"column":1,"nodeType":"356","messageId":"357","endLine":184,"endColumn":159},{"ruleId":"354","severity":2,"message":"358","line":275,"column":1,"nodeType":"356","messageId":"357","endLine":275,"endColumn":159},{"ruleId":"359","severity":1,"message":"360","line":27,"column":17,"nodeType":"361","messageId":"362","endLine":27,"endColumn":43},{"ruleId":"359","severity":1,"message":"360","line":27,"column":17,"nodeType":"361","messageId":"362","endLine":27,"endColumn":43},{"ruleId":"363","severity":2,"message":"364","line":50,"column":59,"nodeType":"361","messageId":"365","endLine":50,"endColumn":67},{"ruleId":"354","severity":2,"message":"366","line":94,"column":1,"nodeType":"356","messageId":"357","endLine":94,"endColumn":113},{"ruleId":"354","severity":2,"message":"367","line":98,"column":1,"nodeType":"356","messageId":"357","endLine":98,"endColumn":111},{"ruleId":"354","severity":2,"message":"368","line":102,"column":1,"nodeType":"356","messageId":"357","endLine":102,"endColumn":120},{"ruleId":"348","severity":1,"message":"349","line":22,"column":26,"nodeType":"350","messageId":"351","endLine":22,"endColumn":39},{"ruleId":"369","severity":2,"message":"370","line":41,"column":7,"nodeType":"361","messageId":"371","endLine":41,"endColumn":8,"fix":"372"},{"ruleId":"369","severity":2,"message":"373","line":42,"column":7,"nodeType":"361","messageId":"371","endLine":42,"endColumn":8,"fix":"374"},{"ruleId":"359","severity":1,"message":"360","line":29,"column":17,"nodeType":"361","messageId":"362","endLine":29,"endColumn":43},{"ruleId":"359","severity":1,"message":"360","line":28,"column":17,"nodeType":"361","messageId":"362","endLine":28,"endColumn":43},{"ruleId":"359","severity":1,"message":"360","line":34,"column":17,"nodeType":"361","messageId":"362","endLine":34,"endColumn":43},{"ruleId":"359","severity":1,"message":"375","line":7,"column":43,"nodeType":"361","messageId":"362","endLine":7,"endColumn":48},{"ruleId":"359","severity":1,"message":"375","line":45,"column":37,"nodeType":"361","messageId":"362","endLine":45,"endColumn":42},{"ruleId":"359","severity":1,"message":"360","line":56,"column":23,"nodeType":"361","messageId":"362","endLine":56,"endColumn":58},{"ruleId":"359","severity":1,"message":"360","line":25,"column":17,"nodeType":"361","messageId":"362","endLine":25,"endColumn":43},"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","@typescript-eslint/camelcase","Definition for rule '@typescript-eslint/camelcase' was not found.","max-len","This line has a length of 131. Maximum allowed is 100.","Program","max","This line has a length of 158. Maximum allowed is 100.","@typescript-eslint/no-unused-vars","'params' is defined but never used.","Identifier","unusedVar","@typescript-eslint/ban-types","Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","bannedTypeMessage","This line has a length of 112. Maximum allowed is 100.","This line has a length of 110. Maximum allowed is 100.","This line has a length of 119. Maximum allowed is 100.","prefer-const","'x' is never reassigned. Use 'const' instead.","useConst",{"range":"376","text":"377"},"'y' is never reassigned. Use 'const' instead.",{"range":"378","text":"377"},"'state' is defined but never used.",[1117,1120],"const",[1154,1157]]